// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <glibmm/error.h>
#include <glibmm/exceptionhandler.h>
#include <giomm/file.h>
#include <giomm/drive.h>
#include <gio/gio.h>

namespace {

static void
SignalProxy_async_callback(GObject*, GAsyncResult* res, void* data)
{
  Gio::SlotAsyncReady* the_slot = static_cast<Gio::SlotAsyncReady*>(data);

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  try
  {
  #endif //GLIBMM_EXCEPTIONS_ENABLED
    Glib::RefPtr<Gio::AsyncResult> result = Glib::wrap(res, true /* take copy */);
    (*the_slot)(result);
  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
  #endif //GLIBMM_EXCEPTIONS_ENABLED

  delete the_slot;
}

} // anonymous namespace

namespace Gio {

void
Volume::mount(const Glib::RefPtr<MountOperation>& mount_operation, const SlotAsyncReady& slot,const Glib::RefPtr<Cancellable>& cancellable)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_volume_mount(gobj(),
                 mount_operation->gobj(),
                 cancellable->gobj(),
                 &SignalProxy_async_callback,
                 slot_copy);

}

void
Volume::mount(const Glib::RefPtr<MountOperation>& mount_operation, const SlotAsyncReady& slot)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_volume_mount(gobj(),
                 mount_operation->gobj(),
                 NULL, // cancellable
                 &SignalProxy_async_callback,
                 slot_copy);
}

void
Volume::mount(const Glib::RefPtr<MountOperation>& mount_operation)
{
  g_volume_mount(gobj(),
                 mount_operation->gobj(),
                 NULL, // cancellable
                 NULL,
                 NULL);
}

void
Volume::mount()
{
  g_volume_mount(gobj(),
                 NULL,
                 NULL, // cancellable
                 NULL,
                 NULL);
}


void Volume::eject(const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_volume_eject(gobj(),
                 static_cast<GMountUnmountFlags>(flags), 
                 cancellable->gobj(),
                 &SignalProxy_async_callback,
                 slot_copy);
}

void Volume::eject(const SlotAsyncReady& slot, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_volume_eject(gobj(),
                 static_cast<GMountUnmountFlags>(flags), 
                 NULL,
                 &SignalProxy_async_callback,
                 slot_copy);
}

void Volume::eject(MountUnmountFlags flags)
{
  g_volume_eject(gobj(),
                 static_cast<GMountUnmountFlags>(flags), 
                 NULL,
                 NULL,
                 NULL);
}

} // namespace Gio

