// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The glibmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>

#include <glibmm/object.h>
#include <glibmm/arrayhandle.h>
#include <glibmm/listhandle.h>
#include <glibmm/asyncresult.h>
#include <glibmm/cancellable.h>
#include <glibmm/fileinfo.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gio {

class FileEnumerator : public Glib::Object
{
  _CLASS_GOBJECT(FileEnumerator, GFileEnumerator, G_FILE_ENUMERATOR, Glib::Object, GObject)

public:
  _WRAP_METHOD(Glib::RefPtr<FileInfo> next_file(const Glib::RefPtr<Cancellable>& cancellable),
               g_file_enumerator_next_file,
               refreturn, errthrow)

  _WRAP_METHOD(bool close(const Glib::RefPtr<Cancellable>& cancellable),
               g_file_enumerator_close,
               errthrow)

  _IGNORE(g_file_enumerator_next_files_async)
  void next_files_async(int num_files,
                        int io_priority,
                        const Glib::RefPtr<Cancellable>& cancellable,
                        const SlotAsyncReady& slot);

  void next_files_async(int num_files,
                        int io_priority,
                        const SlotAsyncReady& slot);

  _WRAP_METHOD(Glib::ListHandle< Glib::RefPtr<FileInfo> > next_files_finish(const Glib::RefPtr<AsyncResult>& result),
               g_file_enumerator_next_files_finish,
               errthrow)
  //TODO: next_files_finish: what does the resulting list contain?
  // FileInfo

  _IGNORE(g_file_enumerator_close_async)
  void close_async(int io_priority,
                   const Glib::RefPtr<Cancellable>& cancellable,
                   const SlotAsyncReady& slot);

  void close_async(int io_priority,
                   const SlotAsyncReady& slot);

  _WRAP_METHOD(bool close_finish(const Glib::RefPtr<AsyncResult>& result),
               g_file_enumerator_close_finish,
               errthrow)

  _WRAP_METHOD(bool is_closed() const, g_file_enumerator_is_closed)

  _WRAP_METHOD(bool has_pending() const, g_file_enumerator_has_pending)

  _WRAP_METHOD(void set_pending(bool pending = true), g_file_enumerator_set_pending)

  // TODO: vfuncs, non-cancellable overrides for generated methods.
};

} // namespace Gio
