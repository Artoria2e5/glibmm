#include <gio/gio.h>

namespace Gio
{

void Settings::get_value(const Glib::ustring& key, Glib::VariantBase& value) const
{
  GVariant* const g_value = g_settings_get_value(const_cast<GSettings*>(gobj()), key.c_str());
  if(!g_value)
    return;

  value.init(g_value, false /* don't take a reference */);
}

void Settings::bind(const Glib::ustring& key,
                    const Glib::PropertyProxy_Base& property_proxy,
                    SettingsBindFlags flags)
{
    bind(key, property_proxy.get_object(), property_proxy.get_name(), flags);
}

void Settings::bind_writable(const Glib::ustring& key,
                             const Glib::PropertyProxy_Base& property_proxy,
                             bool inverted)
{
    bind_writable(key, property_proxy.get_object(), property_proxy.get_name(), inverted);
}

}
