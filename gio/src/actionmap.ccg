// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2012 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <giomm/action.h>
#include <giomm/simpleaction.h>

namespace Gio
{

Glib::RefPtr<SimpleAction> ActionMap::add_action(const Glib::ustring& name)
{
  Glib::RefPtr<SimpleAction> action = SimpleAction::create(name);
  add_action(action);
  return action;
}

Glib::RefPtr<SimpleAction> ActionMap::add_action(const Glib::ustring& name, const ActivateSlot& slot)
{
  Glib::RefPtr<SimpleAction> action = add_action(name);
  action->signal_activate().connect(slot);
  return action;
}

Glib::RefPtr<SimpleAction> ActionMap::add_action_bool(const Glib::ustring& name, bool state)
{
  Glib::RefPtr<SimpleAction> action = SimpleAction::create_bool(name, state);
  add_action(action);
  return action;
}

Glib::RefPtr<SimpleAction> ActionMap::add_action_bool(const Glib::ustring& name, const ActivateSlot& slot, bool state)
{
  Glib::RefPtr<SimpleAction> action = add_action_bool(name, state);
  action->signal_activate().connect(slot);
  return action;
}

Glib::RefPtr<SimpleAction> ActionMap::add_action_radio_string(const Glib::ustring& name, const Glib::ustring& state)
{
  Glib::RefPtr<SimpleAction> action = SimpleAction::create_radio_string(name, state);
  add_action(action);
  return action;
}

Glib::RefPtr<SimpleAction> ActionMap::add_action_radio_string(const Glib::ustring& name, const ActivateSlot& slot, const Glib::ustring& state)
{
  Glib::RefPtr<SimpleAction> action = add_action_radio_string(name, state);
  action->signal_activate().connect(slot);
  return action;
}

Glib::RefPtr<SimpleAction> ActionMap::add_action_radio_integer(const Glib::ustring& name, gint32 state)
{
  Glib::RefPtr<SimpleAction> action = SimpleAction::create_radio_integer(name, state);
  add_action(action);
  return action;
}

Glib::RefPtr<SimpleAction> ActionMap::add_action_radio_integer(const Glib::ustring& name, const ActivateSlot& slot, gint32 state)
{
  Glib::RefPtr<SimpleAction> action = add_action_radio_integer(name, state);
  action->signal_activate().connect(slot);
  return action;
}


} // namespace Gio
