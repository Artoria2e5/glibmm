// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>

#ifdef GLIBMM_EXCEPTIONS_ENABLED
#include <exception>
#endif
#include <string>

#include <glibmm/interface.h>
#include <glibmm/object.h>
#include <giomm/icon.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/interface_p.h)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gio
{

_WRAP_ENUM(AppInfoCreateFlags, GAppInfoCreateFlags, NO_GTYPE)

class AppInfo;

/** This is used to handle, for instance, startup notification and launching of the new application on the same screen as the launching window.
 * See also AppInfo.
 *
 * @newin2p16
 */
class AppLaunchContext : public Glib::Object
{
  _CLASS_GOBJECT(AppLaunchContext, GAppLaunchContext, G_APP_LAUNCH_CONTEXT, Glib::Object, GObject)

protected:
  _CTOR_DEFAULT()

public:
  _WRAP_CREATE()

  _WRAP_METHOD(std::string get_display(const Glib::RefPtr<AppInfo>& info, const Glib::ListHandle<std::string>& files),
               g_app_launch_context_get_display)
  _WRAP_METHOD(std::string get_startup_notify_id(const Glib::RefPtr<AppInfo>& info, const Glib::ListHandle<std::string>& files),
               g_app_launch_context_get_startup_notify_id)
  _WRAP_METHOD(void launch_failed(const std::string& startup_notify_id),
               g_app_launch_context_launch_failed)
};

/** Application information, to describe applications installed on the system, 
 * and launch them.
 * See also AppLaunchContext.
 *
 * @newin2p16
 */
class AppInfo : public Glib::Interface
{
  _CLASS_INTERFACE(AppInfo, GAppInfo, G_APP_INFO, GAppInfoIface)

public:
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  static Glib::RefPtr<AppInfo> create_from_commandline(const std::string& commandline,
                                                       const std::string& application_name,
                                                       AppInfoCreateFlags flags);
#else
  static Glib::RefPtr<AppInfo> create_from_commandline(const std::string& commandline,
                                                       const std::string& application_name,
                                                       AppInfoCreateFlags flags,
                                                       std::auto_ptr<Glib::Error>& error);
#endif // GLIBMM_EXCEPTIONS_ENABLED

  _IGNORE(g_app_info_dup)
  _IGNORE(g_app_info_equal)

  // TODO: Decide whether this is a good idea. murrayc
  // TODO: Documentation.
  // I declare this as virtual so that it is possible to override
  // the method in possible derived classes. markoa
  virtual bool equal(const Glib::RefPtr<AppInfo>& other) const;

  _WRAP_METHOD(std::string get_id() const, g_app_info_get_id)
  _WRAP_METHOD(std::string get_name() const, g_app_info_get_name)
  _WRAP_METHOD(std::string get_description() const, g_app_info_get_description)
  _WRAP_METHOD(std::string get_executable() const, g_app_info_get_executable)

  _WRAP_METHOD(Glib::RefPtr<Icon> get_icon(), g_app_info_get_icon, refreturn)
  _WRAP_METHOD(const Glib::RefPtr<const Icon> get_icon() const,
               g_app_info_get_icon,
               refreturn, constversion)

  _WRAP_METHOD(bool launch(const Glib::ListHandle<std::string>& files,
                           const Glib::RefPtr<AppLaunchContext>& launch_context),
               g_app_info_launch,
               errthrow)
  _WRAP_METHOD(bool supports_uris() const, g_app_info_supports_uris)
  _WRAP_METHOD(bool supports_files() const, g_app_info_supports_files)
  _WRAP_METHOD(bool launch_uris(const Glib::ListHandle<std::string>& uris,
                                GAppLaunchContext* launch_context),
               g_app_info_launch_uris,
               errthrow)
  _WRAP_METHOD(bool should_show() const, g_app_info_should_show)

  _WRAP_METHOD(bool set_as_default_for_type(const std::string& content_type),
               g_app_info_set_as_default_for_type,
               errthrow)
  _WRAP_METHOD(bool set_as_default_for_extension(const std::string& extension),
               g_app_info_set_as_default_for_extension,
               errthrow)
  _WRAP_METHOD(bool add_supports_type(const std::string& content_type),
               g_app_info_add_supports_type,
               errthrow)
  _WRAP_METHOD(bool can_remove_supports_type() const, g_app_info_can_remove_supports_type)
  _WRAP_METHOD(bool remove_supports_type(const std::string& content_type),
               g_app_info_remove_supports_type,
               errthrow)

  static Glib::ListHandle< Glib::RefPtr<AppInfo> > get_all();

  static Glib::ListHandle< Glib::RefPtr<AppInfo> > get_all_for_type(const std::string& content_type);

  static Glib::RefPtr<AppInfo> get_default_for_type(const std::string& content_type, bool must_support_uris = true);

  static Glib::RefPtr<AppInfo> get_default_for_uri_scheme(const std::string& uri_scheme);

  //TODO: vfuncs?
};

//TODO: Probably remove these (and others elsewhere) because they will lead to confusion with the regular RefPtr operator==. murrayc.

/** @relates Gio::AppInfo */
inline bool operator==(const Glib::RefPtr<AppInfo>& lhs, const Glib::RefPtr<AppInfo>& rhs)
{ return lhs->equal(rhs); }

/** @relates Gio::AppInfo */
inline bool operator!=(const Glib::RefPtr<AppInfo>& lhs, const Glib::RefPtr<AppInfo>& rhs)
{ return ! lhs->equal(rhs); }

} // namespace Gio

