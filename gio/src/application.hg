// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <giomm/cancellable.h>
#include <glibmm/object.h>
#include <glibmm/variant.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gio
{

_WRAP_ENUM(ApplicationFlags, GApplicationFlags, NO_GTYPE)

class ActionGroup;

/** TODO
 *
 * @newin{2,26}
 */
class Application : public Glib::Object
{
  _CLASS_GOBJECT(Application, GApplication, G_APPLICATION, Glib::Object, GObject)

protected:
  _CTOR_DEFAULT()

public:
  //_WRAP_CREATE()

  _WRAP_METHOD(static Glib::RefPtr<Application> create(const Glib::ustring& appid, ApplicationFlags flags = APPLICATION_FLAGS_NONE), g_application_new)

  _WRAP_METHOD(static bool is_valid(const Glib::ustring& application_id), g_application_id_is_valid) 

  _WRAP_METHOD(Glib::ustring get_id() const, g_application_get_application_id)
  _WRAP_METHOD(void set_id(const Glib::ustring& application_id), g_application_set_application_id)

  _WRAP_METHOD(guint get_inactivity_timeout() const, g_application_get_inactivity_timeout)
  _WRAP_METHOD(void set_inactivity_timeout(guint inactivity_timeout), g_application_set_inactivity_timeout)

  _WRAP_METHOD(ApplicationFlags get_flags() const, g_application_get_flags)
  _WRAP_METHOD(void set_flags(ApplicationFlags flags), g_application_set_flags)

  _WRAP_METHOD(void set_action_group(const Glib::RefPtr<ActionGroup>& action_group), g_application_set_action_group)

  _WRAP_METHOD(bool is_registered() const, g_application_get_is_registered)
  _WRAP_METHOD(bool is_remote() const, g_application_get_is_remote)

  //TODO: Add a version with no cancellable.
  //Renamed from register() because that is a C++ keyword.
  _WRAP_METHOD(bool register_application(const Glib::RefPtr<Gio::Cancellable>& cancellable), g_application_register, errthrow)

  _WRAP_METHOD(void hold(), g_application_hold)
  _WRAP_METHOD(void release(), g_application_release)
  _WRAP_METHOD(void activate(), g_application_activate)

  //TODO: _WRAP_METHOD(void open(GFile **files, gint n_files, const Glib::ustring& hint), g_application_open)

  _WRAP_METHOD(void run(int argc, char** argv), g_application_run)
  //TODO: g_application_run_with_arguments)

  _WRAP_PROPERTY("action-group", Glib::RefPtr<ActionGroup>)
  _WRAP_PROPERTY("application-id", Glib::ustring)
  _WRAP_PROPERTY("flags", ApplicationFlags)
  _WRAP_PROPERTY("inactivity-timeout", guint)
  _WRAP_PROPERTY("is-registered", bool)
  _WRAP_PROPERTY("is-remote", bool)

//#m4 _CONVERSION(`const gchar*', `const Glib::ustring&', `Glib::ustring($3)')
//#m4 _CONVERSION(`GVariant*', `const Glib::VariantBase&', `Glib::wrap($3, true)')

  _WRAP_SIGNAL(void startup(), "startup")
  _WRAP_SIGNAL(void activate(), "activate")
  //TODO: _WRAP_SIGNAL(void open(GFile** files, int n_files, const Glib::ustring& hint), "open")
  //TODO: Wrap ApplicationCommandLine: _WRAP_SIGNAL(void command_line(const Glib::RefPtr<ApplicationCommandLine>& command_line), "command-line")
};


} // namespace Gio
