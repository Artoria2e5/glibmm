// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>

#include <glibmm/interface.h>
#include <giomm/asyncresult.h>
#include <giomm/cancellable.h>
#include <giomm/icon.h>
#include <giomm/mountoperation.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/interface_p.h)

namespace Gio
{

/** Virtual File System drive management.
 *
 * This represent a piece of hardware connected to the machine. It's generally only created for removable hardware or hardware with removable media.
 * Gio::Drive is a container class for Gio::Volume objects that stem from the same piece of media. As such, Gio::Drive abstracts a drive with 
 * (or without) removable media and provides operations for querying whether media is available, determing whether media change is automatically 
 * detected and ejecting the media.
 *
 * If the Gio::Drive reports that media isn't automatically detected, one can poll for media; typically one should not do this periodically as a 
 * poll for media operation is potententially expensive and may spin up the drive, creating noise.
 */
class Drive : public Glib::Interface
{
  _CLASS_INTERFACE(Drive, GDrive, G_DRIVE, GDriveIface)
public:

  _WRAP_METHOD(Glib::ustring get_name() const, g_drive_get_name)

  _WRAP_METHOD(Glib::RefPtr<Icon> get_icon(),
               g_drive_get_icon,
               refreturn)

  _WRAP_METHOD(Glib::RefPtr<const Icon> get_icon() const,
               g_drive_get_icon,
               refreturn, constversion)
  _WRAP_METHOD(bool has_volumes() const, g_drive_has_volumes)

  // TODO: get_volumes, returns a list of GVolumes, we shouldn't take copy
  // as these are owned by the volume monitor


  /** Ejects the drive.
   * @param cancellable A cancellable object which can be used to cancel the eject.
   * @param slot A callback which will be called when the eject is completed or canceled.
   */
  void eject(const Glib::RefPtr<Cancellable>& cancellable,
             const SlotAsyncReady& slot);

  /** Ejects the drive.
   * @param slot A callback which will be called when the eject is completed.
   */
  void eject(const SlotAsyncReady& slot);
  _IGNORE(g_drive_eject)

  _WRAP_METHOD(bool eject_finish(Glib::RefPtr<AsyncResult>& result),
               g_drive_eject_finish,
               errthrow)

  /* vfuncs */

  _WRAP_VFUNC(Glib::ustring get_name() const, "get_name")
  // TODO: get_icon (when we wrap GIcon)
  _WRAP_VFUNC(bool has_volumes() const, "has_volumes")
  //TODO: finish
};

} // namespace Gio

