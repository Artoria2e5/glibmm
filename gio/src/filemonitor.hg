// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gio
{

_WRAP_ENUM(FileMonitorEvent, GFileMonitorEvent, NO_GTYPE)

/** Monitors a file or directory for changes.
 * TODO: Documentation: See http://bugzilla.gnome.org/show_bug.cgi?id=509994.
 * @newin2p16
 */
class FileMonitor : public Glib::Object
{
  _CLASS_GOBJECT(FileMonitor, GFileMonitor, G_FILE_MONITOR, Glib::Object, GObject)
protected:

public:
  
  _WRAP_METHOD(bool cancel(), g_file_monitor_cancel)
  _WRAP_METHOD(bool is_cancelled() const, g_file_monitor_is_cancelled)
  _WRAP_METHOD(void set_rate_limit(int limit_msecs), g_file_monitor_set_rate_limit)

  //g_file_monitor_emit_event is for implementations.
  _IGNORE(g_file_monitor_emit_event)

  _WRAP_SIGNAL(void changed(const Glib::RefPtr<File>& file, const Glib::RefPtr<File>& other_file, FileMonitorEvent event_type), "changed")
  
  //TODO: Write .defs for the vfunc:
  _WRAP_VFUNC(bool cancel(), cancel);

  _WRAP_PROPERTY("rate-limit", int)
  _WRAP_PROPERTY("cancelled", bool)
};

} // namespace Gio

