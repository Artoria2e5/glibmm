// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/file.h>
#include <giomm/actiongroup.h>
#include <giomm/init.h>
#include <cstring> // std::memset()
#include <vector>

namespace // anonymous
{
//TODO: At the next ABI break, implement the pimpl idiom. Then we need not use
// a GQuark for ExtraApplicationData, which should be renamed to
// struct Gio::Application::Impl.
// These are new data members that can't be added to Gio::Application now,
// because it would break ABI.
struct ExtraApplicationData
{
  std::vector<gchar*> option_entry_strings;

  ~ExtraApplicationData()
  {
    for (std::vector<gchar*>::iterator iter = option_entry_strings.begin();
         iter != option_entry_strings.end(); ++iter)
    {
      g_free(*iter);
      *iter = 0;
    }
  }
};

GQuark quark_extra_application_data =
  g_quark_from_static_string("glibmm__Gio::Application::quark_extra_application_data");

void Application_delete_extra_application_data(gpointer data)
{
  ExtraApplicationData* extra_application_data = static_cast<ExtraApplicationData*>(data);
  delete extra_application_data;
}

static void Application_signal_open_callback(GApplication* self, GFile** files,
  gint n_files, const gchar* hint, void* data)
{
  typedef sigc::slot< void, const Gio::Application::type_vec_files&, const Glib::ustring& > SlotType;

  Gio::Application::type_vec_files vec_files(n_files);
  for(int i = 0; i < n_files; ++i)
  {
    vec_files[i] = Glib::wrap(files[i], true);
  }

  const Glib::ustring hint_str = (hint ? hint : Glib::ustring());

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data)) {
        (*static_cast<SlotType*>(slot))(vec_files, hint_str);
        return;
      }
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  return;
}

static void Application_signal_open_notify_callback(GApplication* self, GFile** files,
                                             gint n_files, const gchar *hint, void* data)
{
  using namespace Gio;
  typedef sigc::slot< void, const Application::type_vec_files&, const Glib::ustring& > SlotType;

  Application::type_vec_files vec_files(n_files);
  for (int i = 0; i < n_files; i++)
  {
    vec_files[i] = Glib::wrap(files[i], true);
  }

  const Glib::ustring hint_str = (hint ? hint : Glib::ustring());

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
      {
        (*static_cast<SlotType*>(slot))(vec_files, hint_str);
        return;
      }
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  return;
}

static const Glib::SignalProxyInfo Application_signal_open_info =
{
  "open",
  (GCallback) &Application_signal_open_callback,
  (GCallback) &Application_signal_open_notify_callback
};

} // anonymous namespace

namespace Gio
{


const Glib::Class& Application::custom_class_init()
{
  Glib::init();
  Gio::init();
  return application_class_.init();
}


Application::Application(const Glib::ustring& application_id, ApplicationFlags flags)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(custom_class_init(), "application_id", (application_id.empty() ? 0 : application_id.c_str()), "flags", ((GApplicationFlags)(flags)), static_cast<char*>(0)))
{

}

//static
void Application::unset_default()
{
  g_application_set_default(0);
}

void Application_Class::open_callback(GApplication* self, GFile** files,
  gint n_files, const gchar *hint)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:

  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        Application::type_vec_files vec_files(n_files);
        for (int i = 0; i < n_files; i++) {
          vec_files[i] = Glib::wrap(files[i], true);
        }

        const Glib::ustring hint_str = (hint ? hint : Glib::ustring());

        obj->on_open(vec_files, hint_str);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
    g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->open)
    (*base->open)(self, files, n_files, hint);
}

Glib::SignalProxy2< void, const Application::type_vec_files&, const Glib::ustring& > Application::signal_open()
{
  return Glib::SignalProxy2< void, const Application::type_vec_files&, const Glib::ustring& >(this, &Application_signal_open_info);
}

void Gio::Application::on_open(const Application::type_vec_files& files, const Glib::ustring& hint)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->open) {
    (*base->open)(gobj(),
      Glib::ArrayHandler<type_vec_files::value_type>::vector_to_array(files).data(),
      files.size(),
      hint.c_str());
  }
}

void Application::open(const type_vec_files& files, const Glib::ustring& hint)
{
  g_application_open(gobj(),
    Glib::ArrayHandler<type_vec_files::value_type>::vector_to_array(files).data(),
    files.size(),
    hint.c_str());
}

void Application::open(const Glib::RefPtr<Gio::File>& file, const Glib::ustring& hint)
{
  type_vec_files files(1);
  files[0] = file;
  open(files, hint);
}

void Application::add_main_option_entry(OptionType arg_type, const Glib::ustring& long_name,
  gchar short_name, const Glib::ustring& description, const Glib::ustring& arg_description, int flags)
{
  // Create a temporary array, just so we can give the correct thing to g_application_add_main_option_entries():
  GOptionEntry array[2];
  std::memset(array, 0, 2 * sizeof(GOptionEntry)); // null-termination

  // g_application_add_main_option_entries() does not take its own copy
  // of the strings. We must keep them alive, and keep pointers to them,
  // so we can delete them when the Application instance is deleted.

  // GOptionEntry.long_name must be set, even if it's an empty string.
  gchar* lname = g_strdup(long_name.c_str());
  gchar* desc = description.empty() ? 0 : g_strdup(description.c_str());
  gchar* arg_desc = arg_description.empty() ? 0 : g_strdup(arg_description.c_str());

  ExtraApplicationData* extra_application_data =
    static_cast<ExtraApplicationData*>(g_object_get_qdata(gobject_, quark_extra_application_data));
  if (!extra_application_data)
  {
    extra_application_data = new ExtraApplicationData();
    g_object_set_qdata_full(gobject_, quark_extra_application_data, extra_application_data,
      Application_delete_extra_application_data);
  }

  extra_application_data->option_entry_strings.push_back(lname);
  if (desc)
    extra_application_data->option_entry_strings.push_back(desc);
  if (arg_desc)
    extra_application_data->option_entry_strings.push_back(arg_desc);

  // Fill in array[0].
  array[0].arg = (GOptionArg)arg_type;
  array[0].long_name = lname;
  array[0].short_name = short_name;
  array[0].description = desc;
  array[0].arg_description = arg_desc;
  array[0].flags = flags;
  // We ensure that this is null to ensure that it is not used,
  // telling GApplication to put the parsed value in the options VariantDict instead.
  array[0].arg_data = 0;

  g_application_add_main_option_entries(gobj(), array);
}

} // namespace Gio
