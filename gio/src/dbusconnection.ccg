// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2010 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/dbusauthobserver.h>
#include <giomm/dbusintrospection.h>
#include <giomm/dbusmethodinvocation.h>
#include <giomm/dbuserror.h>
#include "slot_async.h"

namespace
{

extern "C"
{

static void DBusConnection_Signal_giomm_callback(GDBusConnection* connection,
  const char* sender_name, const char* object_path,
  const char* interface_name, const char* signal_name, GVariant* parameters,
  void* user_data)
{
  Gio::DBus::Connection::SlotSignal* the_slot =
    static_cast<Gio::DBus::Connection::SlotSignal*>(user_data);

  try
  {
    (*the_slot)(Glib::wrap(connection, true), (sender_name ? sender_name : ""),
      (object_path ? object_path : ""), (interface_name ? interface_name : ""),
      (signal_name ? signal_name : ""), Glib::VariantBase(parameters, true));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

static void DBusConnection_Signal_giomm_callback_destroy(void* data)
{
  delete static_cast<Gio::DBus::Connection::SlotSignal*>(data);
}

static GDBusMessage* DBusConnection_Message_Filter_giomm_callback(
  GDBusConnection* connection, GDBusMessage* message, gboolean incoming,
  void* user_data)
{
  Gio::DBus::Connection::SlotMessageFilter* the_slot =
    static_cast<Gio::DBus::Connection::SlotMessageFilter*>(user_data);

  try
  {
    Glib::RefPtr<Gio::DBus::Message> result = (*the_slot)(
      Glib::wrap(connection, true), Glib::wrap(message, true),
      static_cast<bool>(incoming));
    return (result) ? result->gobj_copy() : 0;
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return message;
}

static void DBusConnection_Message_Filter_giomm_callback_destroy(void* data)
{
  delete static_cast<Gio::DBus::Connection::SlotMessageFilter*>(data);
}

static void DBusInterfaceVTable_MethodCall_giomm_callback(
  GDBusConnection* connection, const char* sender, const char* object_path,
  const char* interface_name, const char* method_name, GVariant* parameters,
  GDBusMethodInvocation* invocation, void* user_data)
{
  Gio::DBus::InterfaceVTable* vtable =
    static_cast<Gio::DBus::InterfaceVTable*>(user_data);

  Gio::DBus::InterfaceVTable::SlotInterfaceMethodCall* the_slot =
    vtable->get_slot_method_call();

  try
  {
    (*the_slot)(Glib::wrap(connection, true), (sender ? sender : ""),
      object_path, interface_name, method_name,
      Glib::VariantBase(parameters, true), Glib::wrap(invocation, true));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

static GVariant* DBusInterfaceVTable_GetProperty_giomm_callback(
  GDBusConnection* connection, const char* sender, const char* object_path,
  const char* interface_name, const char* property_name, GError** error,
  void* user_data)
{
  Gio::DBus::InterfaceVTable* vtable =
    static_cast<Gio::DBus::InterfaceVTable*>(user_data);

  Gio::DBus::InterfaceVTable::SlotInterfaceGetProperty* the_slot =
    vtable->get_slot_get_property();

  try
  {
    Glib::VariantBase result;

    (*the_slot)(result, Glib::wrap(connection, true), sender, object_path,
      interface_name, property_name);
    return result.gobj_copy();
  }
  catch(const Glib::Error& ex)
  {
    if(error)
      *error = g_error_copy(ex.gobj());
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return 0;
}

static gboolean DBusInterfaceVTable_SetProperty_giomm_callback(
  GDBusConnection* connection, const char* sender, const char* object_path,
  const char* interface_name, const char* property_name, GVariant* value,
  GError** error, void* user_data)
{
  Gio::DBus::InterfaceVTable* vtable =
    static_cast<Gio::DBus::InterfaceVTable*>(user_data);

  Gio::DBus::InterfaceVTable::SlotInterfaceSetProperty* the_slot =
    vtable->get_slot_set_property();

  try
  {
    return static_cast<gboolean>((*the_slot)(Glib::wrap(connection, true),
      sender, object_path, interface_name, property_name,
      Glib::VariantBase(value, true)));
  }
  catch(const Glib::Error& ex)
  {
    if(error)
      *error = g_error_copy(ex.gobj());
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return false;
}

static char** DBusSubtreeVTable_Enumerate_giomm_callback(
  GDBusConnection* connection, const char* sender, const char* object_path,
  void* user_data)
{
  Gio::DBus::SubtreeVTable* vtable =
    static_cast<Gio::DBus::SubtreeVTable*>(user_data);

  Gio::DBus::SubtreeVTable::SlotSubtreeEnumerate* the_slot =
    vtable->get_slot_enumerate();

  try
  {
    std::vector<Glib::ustring> result =
      (*the_slot)(Glib::wrap(connection, true), sender, object_path);

    // This will be freed by the caller.
    char** ret = g_new(char*, result.size());

    for(std::vector<Glib::ustring>::size_type i = 0; i < result.size(); i++)
    {
      ret[i] = g_strdup(result[i].c_str());
    }

    return ret;
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return 0;
}

static GDBusInterfaceInfo** DBusSubtreeVTable_Introspect_giomm_callback(
  GDBusConnection* connection, const char* sender, const char* object_path,
  const char* node, void* user_data)
{
  Gio::DBus::SubtreeVTable* vtable =
    static_cast<Gio::DBus::SubtreeVTable*>(user_data);

  Gio::DBus::SubtreeVTable::SlotSubtreeIntrospect* the_slot =
    vtable->get_slot_introspect();

  try
  {
    std::vector< Glib::RefPtr<Gio::DBus::InterfaceInfo> > result =
      (*the_slot)(Glib::wrap(connection, true), sender, object_path, node);

    // This will be freed by the caller, along with unreferencing its members.
    GDBusInterfaceInfo** info = g_new(GDBusInterfaceInfo*, result.size());

    for(std::vector< Glib::RefPtr<Gio::DBus::InterfaceInfo> >::size_type i = 0;
      i < result.size(); i++)
    {
      info[i] = static_cast<GDBusInterfaceInfo*>(
        g_object_ref(result[i]->gobj()));
    }

    return info;
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return 0;
}

static const GDBusInterfaceVTable* DBusSubtreeVTable_Dispatch_giomm_callback(
  GDBusConnection* connection, const char* sender, const char* object_path,
  const char* interface_name, const char* node, void** out_user_data,
  void* user_data)
{
  Gio::DBus::SubtreeVTable* vtable =
    static_cast<Gio::DBus::SubtreeVTable*>(user_data);

  Gio::DBus::SubtreeVTable::SlotSubtreeDispatch* the_slot =
    vtable->get_slot_dispatch();

  try
  {
    const Gio::DBus::InterfaceVTable* vtable =
      (*the_slot)(Glib::wrap(connection, true), sender, object_path,
      interface_name, (node ? node : ""));

    *out_user_data = const_cast<Gio::DBus::InterfaceVTable*>(vtable);

    return vtable->gobj();
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return 0;
}

} // extern "C"

}

namespace Gio
{

namespace DBus
{

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init_async(slot, cancellable);
}

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init_async(slot, cancellable);
}

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init_async(slot);
}

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init_async(slot);
}

Connection::Connection(const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init_async(slot, cancellable);
}

Connection::Connection(const std::string& address,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init_async(slot, cancellable);
}

Connection::Connection(const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init_async(slot);
}

Connection::Connection(const std::string& address,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init_async(slot);
}

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init(cancellable);
}

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init(cancellable);
}

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init();
}

Connection::Connection(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  ConnectionFlags flags)
:
  _CONSTRUCT("stream", Glib::unwrap(stream),
    "guid", (guid.empty() ? 0 : guid.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init();
}

Connection::Connection(const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init(cancellable);
}

Connection::Connection(const std::string& address,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init(cancellable);
}

Connection::Connection(const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", Glib::unwrap(observer))
{
  init();
}

Connection::Connection(const std::string& address,
  ConnectionFlags flags)
:
  _CONSTRUCT("address", (address.empty() ? 0 : address.c_str()),
    "flags", static_cast<GDBusConnectionFlags>(flags),
    "authentication-observer", static_cast<GDBusAuthObserver*>(0))
{
  init();
}

//static
void Connection::create(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().

  Connection(stream, guid, observer, slot, cancellable, flags);
}

//static
void Connection::create(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().

  Connection(stream, guid, slot, cancellable, flags);
}

//static
void Connection::create(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().
  Connection(stream, guid, observer, slot, flags);
}

//static
void Connection::create(const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().
  Connection(stream, guid, slot, flags);
}

//static
Glib::RefPtr<Connection> Connection::create_sync(
  const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(stream, guid,
    observer, cancellable, flags));
}

//static
Glib::RefPtr<Connection> Connection::create_sync(
  const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(stream, guid,
    cancellable, flags));
}

//static
Glib::RefPtr<Connection> Connection::create_sync(
  const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  const Glib::RefPtr<AuthObserver>& observer,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(stream, guid,
    observer, flags));
}

//static
Glib::RefPtr<Connection> Connection::create_sync(
  const Glib::RefPtr<IOStream>& stream,
  const std::string& guid,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(stream, guid,
    flags));
}

//static
void Connection::create_for_address(const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().
  Connection(address, observer, slot, cancellable, flags);
}

//static
void Connection::create_for_address(const std::string& address,
  const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().
  Connection(address, slot, cancellable, flags);
}

//static
void Connection::create_for_address(const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().
  Connection(address, observer, slot, flags);
}

//static
void Connection::create_for_address(const std::string& address,
  const SlotAsyncReady& slot,
  ConnectionFlags flags)
{
  // Note that this does not return anything, because it is async - see
  // create_finish().
  Connection(address, slot, flags);
}

//static
Glib::RefPtr<Connection> Connection::create_for_address_sync(
  const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(address, observer,
    cancellable, flags));
}

//static
Glib::RefPtr<Connection> Connection::create_for_address_sync(
  const std::string& address,
  const Glib::RefPtr<Cancellable>& cancellable,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(address, cancellable,
    flags));
}

//static
Glib::RefPtr<Connection> Connection::create_for_address_sync(
  const std::string& address,
  const Glib::RefPtr<AuthObserver>& observer,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(address, observer,
    flags));
}

//static
Glib::RefPtr<Connection> Connection::create_for_address_sync(
  const std::string& address,
  ConnectionFlags flags)
{
  return Glib::RefPtr<Connection>(new Connection(address, flags));
}

//static
void Connection::get(BusType bus_type, const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_bus_get(static_cast<GBusType>(bus_type), Glib::unwrap(cancellable),
    &SignalProxy_async_callback, slot_copy);
}

//static
void Connection::get(BusType bus_type, const SlotAsyncReady& slot)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_bus_get(static_cast<GBusType>(bus_type), 0, &SignalProxy_async_callback,
    slot_copy);
}

//static
Glib::RefPtr<Connection> Connection::get_sync(BusType bus_type)
{
  GError* gerror = 0;

  GDBusConnection* result = g_bus_get_sync(static_cast<GBusType>(bus_type),
    0, & gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return Glib::wrap(result);
}

void Connection::close()
{
  g_dbus_connection_close(gobj(), 0, 0, 0);
}

void Connection::close(const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_dbus_connection_close(gobj(),
                    Glib::unwrap(cancellable),
                    &SignalProxy_async_callback,
                    slot_copy);
}

void Connection::close(const SlotAsyncReady& slot)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_dbus_connection_close(gobj(),
                    0,
                    &SignalProxy_async_callback,
                    slot_copy);
}

void Connection::close_sync()
{
  GError* gerror = 0;
  g_dbus_connection_close_sync(gobj(), 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
}

void Connection::flush()
{
  g_dbus_connection_flush(gobj(), 0, 0, 0);
}

void Connection::flush(const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_dbus_connection_flush(gobj(),
                    Glib::unwrap(cancellable),
                    &SignalProxy_async_callback,
                    slot_copy);
}

void Connection::flush(const SlotAsyncReady& slot)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_dbus_connection_flush(gobj(),
                    0,
                    &SignalProxy_async_callback,
                    slot_copy);
}

void Connection::flush_sync()
{
  GError* gerror = 0;
  g_dbus_connection_flush_sync(gobj(), 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
}

bool Connection::send_message(const Glib::RefPtr<Message>& message,
  SendMessageFlags flags)
{
  GError* gerror = 0;

  const bool result = g_dbus_connection_send_message(gobj(),
    Glib::unwrap(message), static_cast<GDBusSendMessageFlags>(flags), 0,
    &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return result;
}

void Connection::send_message_with_reply(const Glib::RefPtr<Message>& message, int timeout_msec,const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);
  volatile guint32 out_serial = 0;
  g_dbus_connection_send_message_with_reply(gobj(), Glib::unwrap(message),
                                      static_cast<GDBusSendMessageFlags>(message->get_flags()),
                                      timeout_msec, &out_serial,
                                      Glib::unwrap(cancellable), &SignalProxy_async_callback,
                                      slot_copy);
  message->set_serial(out_serial);
}

void Connection::send_message_with_reply(const Glib::RefPtr<Message>& message, int timeout_msec,const SlotAsyncReady& slot)
{
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);
  volatile guint32 out_serial = 0;
  g_dbus_connection_send_message_with_reply(gobj(), Glib::unwrap(message),
                                      static_cast<GDBusSendMessageFlags>(message->get_flags()),
                                      timeout_msec, &out_serial,
                                      0, &SignalProxy_async_callback,
                                      slot_copy);
  message->set_serial(out_serial);
}

Glib::RefPtr<Message> Connection::send_message_with_reply_sync(
  const Glib::RefPtr<Message>& message,
  const Glib::RefPtr<Cancellable>& cancellable,
  gint timeout_msec
)
{
  volatile guint32 out_serial = 0;
  GError* gerror = 0;

  GDBusMessage* result =
    g_dbus_connection_send_message_with_reply_sync(gobj(),
    Glib::unwrap(message),
    static_cast<GDBusSendMessageFlags>(message->get_flags()),
    timeout_msec, &out_serial, Glib::unwrap(cancellable), &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  message->set_serial(out_serial);
  return Glib::wrap(result);
}

Glib::RefPtr<Message> Connection::send_message_with_reply_sync(
  const Glib::RefPtr<Message>& message,
  gint timeout_msec
)
{
  volatile guint32 out_serial = 0;
  GError* gerror = 0;

  GDBusMessage* result =
    g_dbus_connection_send_message_with_reply_sync(gobj(),
    Glib::unwrap(message),
    static_cast<GDBusSendMessageFlags>(message->get_flags()), timeout_msec,
    &out_serial, 0, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  message->set_serial(out_serial);
  return Glib::wrap(result);
}

void Connection::call(
  const Glib::ustring&                  object_path,
  const Glib::ustring&                  interface_name,
  const Glib::ustring&                  method_name,
  const Glib::VariantBase&              parameters,
  const SlotAsyncReady&                 slot,
  const Glib::RefPtr<Cancellable>&      cancellable,
  const Glib::ustring&                  bus_name,
  int                                   timeout_msec,
  CallFlags                         flags,
  const Glib::VariantType&              reply_type
)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_dbus_connection_call(gobj(), bus_name.c_str(), object_path.c_str(),
    interface_name.c_str(), method_name.c_str(),
    const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
    static_cast<GDBusCallFlags>(flags), timeout_msec,
    Glib::unwrap(cancellable), &SignalProxy_async_callback, slot_copy);
}

// Non-cancellable version.
void Connection::call(
  const Glib::ustring&                  object_path,
  const Glib::ustring&                  interface_name,
  const Glib::ustring&                  method_name,
  const Glib::VariantBase&              parameters,
  const SlotAsyncReady&                 slot,
  const Glib::ustring&                  bus_name,
  int                                   timeout_msec,
  CallFlags                         flags,
  const Glib::VariantType&              reply_type
)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_dbus_connection_call(gobj(), bus_name.c_str(), object_path.c_str(),
    interface_name.c_str(), method_name.c_str(),
    const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
    static_cast<GDBusCallFlags>(flags), timeout_msec, 0,
    &SignalProxy_async_callback, slot_copy);
}

void Connection::call_finish(
  Glib::VariantBase&                    output,
  const Glib::RefPtr<AsyncResult>&      res
)
{
  GError* gerror = 0;
  GVariant* const gvariant =
    g_dbus_connection_call_finish(gobj(), Glib::unwrap(res), &gerror);
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  output.init(gvariant); // No need for extra ref.
}

void Connection::call_sync(
  Glib::VariantBase&                    output,
  const Glib::ustring&                  object_path,
  const Glib::ustring&                  interface_name,
  const Glib::ustring&                  method_name,
  const Glib::VariantBase&              parameters,
  const Glib::RefPtr<Cancellable>&      cancellable,
  const Glib::ustring&                  bus_name,
  int                                   timeout_msec,
  CallFlags                         flags,
  const Glib::VariantType&              reply_type
)
{
  GError* gerror = 0;

  GVariant* const gvariant =
    g_dbus_connection_call_sync(gobj(), bus_name.c_str(), object_path.c_str(),
    interface_name.c_str(), method_name.c_str(),
    const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
    static_cast<GDBusCallFlags>(flags), timeout_msec,
    Glib::unwrap(cancellable), &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  output.init(gvariant); // No need to take extra reference.
}

// Non-cancellable version.
void Connection::call_sync(
  Glib::VariantBase&                    output,
  const Glib::ustring&                  object_path,
  const Glib::ustring&                  interface_name,
  const Glib::ustring&                  method_name,
  const Glib::VariantBase&              parameters,
  const Glib::ustring&                  bus_name,
  int                                   timeout_msec,
  CallFlags                         flags,
  const Glib::VariantType&              reply_type
)
{
  GError* gerror = 0;

  GVariant* const gvariant =
    g_dbus_connection_call_sync(gobj(), bus_name.c_str(), object_path.c_str(),
    interface_name.c_str(), method_name.c_str(),
    const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
    static_cast<GDBusCallFlags>(flags), timeout_msec, 0, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  output.init(gvariant); // No need to take extra reference.
}

void Connection::emit_signal(
  const Glib::ustring&                object_path,
  const Glib::ustring&                interface_name,
  const Glib::ustring&                signal_name,
  const Glib::ustring&                destination_bus_name,
  const Glib::VariantBase&            parameters
)
{
  GError* gerror = 0;

  g_dbus_connection_emit_signal(gobj(),
    destination_bus_name.c_str(), object_path.c_str(), interface_name.c_str(),
    signal_name.c_str(), const_cast<GVariant*>(parameters.gobj()), &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);
}

guint Connection::signal_subscribe(
  const SlotSignal& slot,
  const Glib::ustring& sender,
  const Glib::ustring& interface_name,
  const Glib::ustring& member,
  const Glib::ustring& object_path,
  const Glib::ustring& arg0,
  SignalFlags flags
)
{
  SlotSignal* slot_copy = new SlotSignal(slot);

  return g_dbus_connection_signal_subscribe(gobj(), sender.c_str(),
    interface_name.c_str(), member.c_str(), object_path.c_str(), arg0.c_str(),
    static_cast<GDBusSignalFlags>(flags),
    &DBusConnection_Signal_giomm_callback, slot_copy,
    &DBusConnection_Signal_giomm_callback_destroy);
}

guint Connection::add_filter(const SlotMessageFilter& slot)
{
  SlotMessageFilter* slot_copy = new SlotMessageFilter(slot);

  return g_dbus_connection_add_filter(gobj(),
    &DBusConnection_Message_Filter_giomm_callback, slot_copy,
    DBusConnection_Message_Filter_giomm_callback_destroy);
}

guint Connection::register_object(const Glib::ustring& object_path,
  const Glib::RefPtr<InterfaceInfo>& interface_info,
  const InterfaceVTable* vtable)
{
  GError* gerror = 0;

  const guint result = g_dbus_connection_register_object(gobj(),
    object_path.c_str(), Glib::unwrap(interface_info),
    vtable->gobj(), const_cast<InterfaceVTable*>(vtable), 0, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return result;
}

guint Connection::register_subtree(const Glib::ustring& object_path,
  const SubtreeVTable* vtable, SubtreeFlags flags)
{
  GError* gerror = 0;

  const guint result = g_dbus_connection_register_subtree(gobj(),
    object_path.c_str(),
    vtable->gobj(), static_cast<GDBusSubtreeFlags>(flags),
    const_cast<SubtreeVTable*>(vtable), 0, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return result;
}

InterfaceVTable::InterfaceVTable(
  const SlotInterfaceMethodCall& slot_method_call,
  const SlotInterfaceGetProperty& slot_get_property,
  const SlotInterfaceSetProperty& slot_set_property
)
: slot_method_call_(new SlotInterfaceMethodCall(slot_method_call)),
  slot_get_property_(new SlotInterfaceGetProperty(slot_get_property)),
  slot_set_property_(new SlotInterfaceSetProperty(slot_set_property))
{
  gobject_.method_call = &DBusInterfaceVTable_MethodCall_giomm_callback;
  gobject_.get_property = &DBusInterfaceVTable_GetProperty_giomm_callback;
  gobject_.set_property = &DBusInterfaceVTable_SetProperty_giomm_callback;
}

InterfaceVTable::~InterfaceVTable()
{
  delete slot_method_call_;
  delete slot_get_property_;
  delete slot_set_property_;
}

InterfaceVTable::SlotInterfaceMethodCall*
  InterfaceVTable::get_slot_method_call() const
{
  return slot_method_call_;
}

InterfaceVTable::SlotInterfaceGetProperty*
  InterfaceVTable::get_slot_get_property() const
{
  return slot_get_property_;
}

InterfaceVTable::SlotInterfaceSetProperty*
  InterfaceVTable::get_slot_set_property() const
{
  return slot_set_property_;
}

SubtreeVTable::SubtreeVTable(
  const SlotSubtreeEnumerate& slot_enumerate,
  const SlotSubtreeIntrospect& slot_introspect,
  const SlotSubtreeDispatch& slot_dispatch
)
: slot_enumerate_(new SlotSubtreeEnumerate(slot_enumerate)),
  slot_introspect_(new SlotSubtreeIntrospect(slot_introspect)),
  slot_dispatch_(new SlotSubtreeDispatch(slot_dispatch))
{
  gobject_.enumerate = &DBusSubtreeVTable_Enumerate_giomm_callback;
  gobject_.introspect = &DBusSubtreeVTable_Introspect_giomm_callback;
  gobject_.dispatch = &DBusSubtreeVTable_Dispatch_giomm_callback;
}

SubtreeVTable::~SubtreeVTable()
{
  delete slot_enumerate_;
  delete slot_introspect_;
  delete slot_dispatch_;
}

SubtreeVTable::SlotSubtreeEnumerate*
  SubtreeVTable::get_slot_enumerate() const
{
  return slot_enumerate_;
}

SubtreeVTable::SlotSubtreeIntrospect*
  SubtreeVTable::get_slot_introspect() const
{
  return slot_introspect_;
}

SubtreeVTable::SlotSubtreeDispatch*
  SubtreeVTable::get_slot_dispatch() const
{
  return slot_dispatch_;
}

} //namespace DBus

} // namespace Gio
