// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>

#include <giomm/outputstream.h>
#include <giomm/seekable.h>
#include <giomm/fileinfo.h>
#include <glibmm/object.h>
#include <glibmm/iochannel.h>


_DEFS(giomm,gio)
_PINCLUDE(giomm/private/outputstream_p.h)

namespace Gio
{

/** FileOutputStream provides output streams that write their content to a file.
 *
 * FileOutputStream implements Seekable, which allows the output stream to jump 
 * to arbitrary positions in the file and to truncate the file, provided the 
 * filesystem of the file supports these operations. In addition to the generic 
 * Seekable API, FileOutputStream has its own API for seeking and positioning. 
 * To find the position of a file output stream, use stream_tell(). To find 
 * out if a file output stream supports seeking, use can_seek(). To position a 
 * file output stream, use seek(). To find out if a file output stream supports 
 * truncating, use can_truncate(). To truncate a file output stream, use 
 * truncate().
 *
 * @newin2p16
 */
class FileOutputStream
: public OutputStream,
  public Seekable
{
  _CLASS_GOBJECT(FileOutputStream, GFileOutputStream, G_FILE_OUTPUT_STREAM, Gio::OutputStream, GOutputStream)
  _IMPLEMENTS_INTERFACE(Seekable)

public:
  //TODO: vfuncs and overloads without Cancellable

  _WRAP_METHOD(Glib::RefPtr<FileInfo> query_info(const std::string& attributes, const Glib::RefPtr<Cancellable>& cancellable),
               g_file_output_stream_query_info,
               refreturn, errthrow)

  _IGNORE(g_file_input_stream_query_info_async)
  void query_info_async(const std::string& attributes, int io_priority, Glib::RefPtr<Cancellable>& cancellable, const SlotAsyncReady& slot);
  //TODO: cancellable can probably be NULL.

  _WRAP_METHOD(Glib::RefPtr<FileInfo> query_info_finish(const Glib::RefPtr<AsyncResult>& result),
               g_file_output_stream_query_info_finish,
               refreturn, errthrow)

  _WRAP_METHOD(std::string get_etag() const, g_file_output_stream_get_etag)
  _WRAP_METHOD(goffset tell() const, g_file_output_stream_tell)
  _WRAP_METHOD(bool can_seek() const, g_file_output_stream_can_seek)

  _WRAP_METHOD(bool seek(goffset offset, Glib::SeekType type, const Glib::RefPtr<Cancellable>& cancellable),
               g_file_output_stream_seek,
               errthrow)
  //TODO: cancellable can probably be NULL.

  _WRAP_METHOD(bool can_truncate() const, g_file_output_stream_can_truncate)
  _WRAP_METHOD(bool truncate(goffset size, const Glib::RefPtr<Cancellable>& cancellable),
               g_file_output_stream_truncate,
               errthrow)
  //TODO: cancellable can probalby be NULL.

};

} // namespace Gio
