(define-method length
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_length")
  (return-type "gint")
)

(define-method length_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_length_unlocked")
  (return-type "gint")
)

(define-method lock
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_lock")
  (return-type "none")
)

(define-method pop
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_pop")
  (return-type "gpointer")
)

(define-method pop_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_pop_unlocked")
  (return-type "gpointer")
)

(define-method push
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_push")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method push_sorted
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_push_sorted")
  (return-type "none")
  (parameters
    '("gpointer" "data")
    '("GCompareDataFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method push_sorted_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_push_sorted_unlocked")
  (return-type "none")
  (parameters
    '("gpointer" "data")
    '("GCompareDataFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method push_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_push_unlocked")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method ref
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_ref")
  (return-type "GAsyncQueue*")
)

(define-method ref_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_ref_unlocked")
  (return-type "none")
)

(define-method sort
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_sort")
  (return-type "none")
  (parameters
    '("GCompareDataFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method sort_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_sort_unlocked")
  (return-type "none")
  (parameters
    '("GCompareDataFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method timed_pop
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_timed_pop")
  (return-type "gpointer")
  (parameters
    '("GTimeVal*" "end_time")
  )
)

(define-method timed_pop_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_timed_pop_unlocked")
  (return-type "gpointer")
  (parameters
    '("GTimeVal*" "end_time")
  )
)

(define-method timeout_pop
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_timeout_pop")
  (return-type "gpointer")
  (parameters
    '("guint64" "timeout")
  )
)

(define-method timeout_pop_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_timeout_pop_unlocked")
  (return-type "gpointer")
  (parameters
    '("guint64" "timeout")
  )
)

(define-method try_pop
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_try_pop")
  (return-type "gpointer")
)

(define-method try_pop_unlocked
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_try_pop_unlocked")
  (return-type "gpointer")
)

(define-method unlock
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_unlock")
  (return-type "none")
)

(define-method unref
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_unref")
  (return-type "none")
)

(define-method unref_and_unlock
  (of-object "GAsyncQueue")
  (c-name "g_async_queue_unref_and_unlock")
  (return-type "none")
)

(define-method add_application
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_add_application")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "name")
    '("const-gchar*" "exec")
  )
)

(define-method add_group
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_add_group")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "group")
  )
)

(define-method free
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_free")
  (return-type "none")
)

(define-method get_added
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_added")
  (return-type "time_t")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method get_app_info
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_app_info")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "name")
    '("gchar**" "exec")
    '("guint*" "count")
    '("time_t*" "stamp")
    '("GError**" "error")
  )
)

(define-method get_applications
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_applications")
  (return-type "const-gchar**")
  (parameters
    '("const-gchar*" "uri")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_description
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_description")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method get_groups
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_groups")
  (return-type "const-gchar**")
  (parameters
    '("const-gchar*" "uri")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_icon
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_icon")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("gchar**" "href")
    '("gchar**" "mime_type")
    '("GError**" "error")
  )
)

(define-method get_is_private
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_is_private")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method get_mime_type
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_mime_type")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method get_modified
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_modified")
  (return-type "time_t")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method get_size
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_size")
  (return-type "gint")
)

(define-method get_title
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_title")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method get_uris
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_uris")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method get_visited
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_get_visited")
  (return-type "time_t")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method has_application
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_has_application")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "name")
    '("GError**" "error")
  )
)

(define-method has_group
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_has_group")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "group")
    '("GError**" "error")
  )
)

(define-method has_item
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_has_item")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method load_from_data
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_load_from_data")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "data")
    '("gsize" "length")
    '("GError**" "error")
  )
)

(define-method load_from_data_dirs
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_load_from_data_dirs")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "file")
    '("gchar**" "full_path")
    '("GError**" "error")
  )
)

(define-method load_from_file
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_load_from_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method move_item
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_move_item")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "old_uri")
    '("const-gchar*" "new_uri")
    '("GError**" "error")
  )
)

(define-method remove_application
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_remove_application")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "name")
    '("GError**" "error")
  )
)

(define-method remove_group
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_remove_group")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "group")
    '("GError**" "error")
  )
)

(define-method remove_item
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_remove_item")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method set_added
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_added")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("time_t" "added")
  )
)

(define-method set_app_info
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_app_info")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "name")
    '("const-gchar*" "exec")
    '("gint" "count")
    '("time_t" "stamp")
    '("GError**" "error")
  )
)

(define-method set_description
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_description")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "description")
  )
)

(define-method set_groups
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_groups")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar**" "groups")
    '("gsize" "length")
  )
)

(define-method set_icon
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_icon")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "href")
    '("const-gchar*" "mime_type")
  )
)

(define-method set_is_private
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_is_private")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("gboolean" "is_private")
  )
)

(define-method set_mime_type
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_mime_type")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "mime_type")
  )
)

(define-method set_modified
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_modified")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("time_t" "modified")
  )
)

(define-method set_title
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "title")
  )
)

(define-method set_visited
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_set_visited")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("time_t" "visited")
  )
)

(define-method to_data
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_to_data")
  (return-type "gchar*")
  (parameters
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method to_file
  (of-object "GBookmarkFile")
  (c-name "g_bookmark_file_to_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-function new
  (c-name "g_bytes_new")
  (return-type "GBytes*")
  (parameters
    '("gconstpointer" "data")
    '("gsize" "size")
  )
)

(define-function new_static
  (c-name "g_bytes_new_static")
  (return-type "GBytes*")
  (parameters
    '("gconstpointer" "data")
    '("gsize" "size")
  )
)

(define-function new_take
  (c-name "g_bytes_new_take")
  (return-type "GBytes*")
  (parameters
    '("const-gpointer" "data")
    '("gsize" "size")
  )
)

(define-function new_with_free_func
  (c-name "g_bytes_new_with_free_func")
  (return-type "GBytes*")
  (parameters
    '("gconstpointer" "data")
    '("gsize" "size")
    '("GDestroyNotify" "free_func")
    '("gpointer" "user_data")
  )
)

(define-method compare
  (of-object "GBytes")
  (c-name "g_bytes_compare")
  (return-type "gint")
  (parameters
    '("gconstpointer" "bytes2")
  )
)

(define-method equal
  (of-object "GBytes")
  (c-name "g_bytes_equal")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "bytes2")
  )
)

(define-method get_data
  (of-object "GBytes")
  (c-name "g_bytes_get_data")
  (return-type "gconstpointer")
  (parameters
    '("gsize*" "size")
  )
)

(define-method get_size
  (of-object "GBytes")
  (c-name "g_bytes_get_size")
  (return-type "gsize")
)

(define-method hash
  (of-object "GBytes")
  (c-name "g_bytes_hash")
  (return-type "guint")
)

(define-method new_from_bytes
  (of-object "GBytes")
  (c-name "g_bytes_new_from_bytes")
  (return-type "GBytes*")
  (parameters
    '("gsize" "offset")
    '("gsize" "length")
  )
)

(define-method ref
  (of-object "GBytes")
  (c-name "g_bytes_ref")
  (return-type "GBytes*")
)

(define-method unref
  (of-object "GBytes")
  (c-name "g_bytes_unref")
  (return-type "none")
)

(define-method unref_to_array
  (of-object "GBytes")
  (c-name "g_bytes_unref_to_array")
  (return-type "const-GByteArray*")
)

(define-method unref_to_data
  (of-object "GBytes")
  (c-name "g_bytes_unref_to_data")
  (return-type "gpointer")
  (parameters
    '("gsize*" "size")
  )
)

(define-function new
  (c-name "g_checksum_new")
  (return-type "GChecksum*")
  (parameters
    '("GChecksumType" "checksum_type")
  )
)

(define-method copy
  (of-object "GChecksum")
  (c-name "g_checksum_copy")
  (return-type "GChecksum*")
)

(define-method free
  (of-object "GChecksum")
  (c-name "g_checksum_free")
  (return-type "none")
)

(define-method get_digest
  (of-object "GChecksum")
  (c-name "g_checksum_get_digest")
  (return-type "none")
  (parameters
    '("guint8*" "buffer")
    '("gsize*" "digest_len")
  )
)

(define-method get_string
  (of-object "GChecksum")
  (c-name "g_checksum_get_string")
  (return-type "const-gchar*")
)

(define-method reset
  (of-object "GChecksum")
  (c-name "g_checksum_reset")
  (return-type "none")
)

(define-method update
  (of-object "GChecksum")
  (c-name "g_checksum_update")
  (return-type "none")
  (parameters
    '("const-guchar*" "data")
    '("gssize" "length")
  )
)

(define-method broadcast
  (of-object "GCond")
  (c-name "g_cond_broadcast")
  (return-type "none")
)

(define-method clear
  (of-object "GCond")
  (c-name "g_cond_clear")
  (return-type "none")
)

(define-method init
  (of-object "GCond")
  (c-name "g_cond_init")
  (return-type "none")
)

(define-method signal
  (of-object "GCond")
  (c-name "g_cond_signal")
  (return-type "none")
)

(define-method wait
  (of-object "GCond")
  (c-name "g_cond_wait")
  (return-type "none")
  (parameters
    '("GMutex*" "mutex")
  )
)

(define-method wait_until
  (of-object "GCond")
  (c-name "g_cond_wait_until")
  (return-type "gboolean")
  (parameters
    '("GMutex*" "mutex")
    '("gint64" "end_time")
  )
)

(define-function new
  (c-name "g_date_new")
  (return-type "GDate*")
)

(define-function new_dmy
  (c-name "g_date_new_dmy")
  (return-type "GDate*")
  (parameters
    '("GDateDay" "day")
    '("GDateMonth" "month")
    '("GDateYear" "year")
  )
)

(define-function new_julian
  (c-name "g_date_new_julian")
  (return-type "GDate*")
  (parameters
    '("guint32" "julian_day")
  )
)

(define-method add_days
  (of-object "GDate")
  (c-name "g_date_add_days")
  (return-type "none")
  (parameters
    '("guint" "n_days")
  )
)

(define-method add_months
  (of-object "GDate")
  (c-name "g_date_add_months")
  (return-type "none")
  (parameters
    '("guint" "n_months")
  )
)

(define-method add_years
  (of-object "GDate")
  (c-name "g_date_add_years")
  (return-type "none")
  (parameters
    '("guint" "n_years")
  )
)

(define-method clamp
  (of-object "GDate")
  (c-name "g_date_clamp")
  (return-type "none")
  (parameters
    '("const-GDate*" "min_date")
    '("const-GDate*" "max_date")
  )
)

(define-method clear
  (of-object "GDate")
  (c-name "g_date_clear")
  (return-type "none")
  (parameters
    '("guint" "n_dates")
  )
)

(define-method compare
  (of-object "GDate")
  (c-name "g_date_compare")
  (return-type "gint")
  (parameters
    '("const-GDate*" "rhs")
  )
)

(define-method days_between
  (of-object "GDate")
  (c-name "g_date_days_between")
  (return-type "gint")
  (parameters
    '("const-GDate*" "date2")
  )
)

(define-method free
  (of-object "GDate")
  (c-name "g_date_free")
  (return-type "none")
)

(define-method get_day
  (of-object "GDate")
  (c-name "g_date_get_day")
  (return-type "GDateDay")
)

(define-method get_day_of_year
  (of-object "GDate")
  (c-name "g_date_get_day_of_year")
  (return-type "guint")
)

(define-method get_iso8601_week_of_year
  (of-object "GDate")
  (c-name "g_date_get_iso8601_week_of_year")
  (return-type "guint")
)

(define-method get_julian
  (of-object "GDate")
  (c-name "g_date_get_julian")
  (return-type "guint32")
)

(define-method get_monday_week_of_year
  (of-object "GDate")
  (c-name "g_date_get_monday_week_of_year")
  (return-type "guint")
)

(define-method get_month
  (of-object "GDate")
  (c-name "g_date_get_month")
  (return-type "GDateMonth")
)

(define-method get_sunday_week_of_year
  (of-object "GDate")
  (c-name "g_date_get_sunday_week_of_year")
  (return-type "guint")
)

(define-method get_weekday
  (of-object "GDate")
  (c-name "g_date_get_weekday")
  (return-type "GDateWeekday")
)

(define-method get_year
  (of-object "GDate")
  (c-name "g_date_get_year")
  (return-type "GDateYear")
)

(define-method is_first_of_month
  (of-object "GDate")
  (c-name "g_date_is_first_of_month")
  (return-type "gboolean")
)

(define-method is_last_of_month
  (of-object "GDate")
  (c-name "g_date_is_last_of_month")
  (return-type "gboolean")
)

(define-method order
  (of-object "GDate")
  (c-name "g_date_order")
  (return-type "none")
  (parameters
    '("GDate*" "date2")
  )
)

(define-method set_day
  (of-object "GDate")
  (c-name "g_date_set_day")
  (return-type "none")
  (parameters
    '("GDateDay" "day")
  )
)

(define-method set_dmy
  (of-object "GDate")
  (c-name "g_date_set_dmy")
  (return-type "none")
  (parameters
    '("GDateDay" "day")
    '("GDateMonth" "month")
    '("GDateYear" "y")
  )
)

(define-method set_julian
  (of-object "GDate")
  (c-name "g_date_set_julian")
  (return-type "none")
  (parameters
    '("guint32" "julian_date")
  )
)

(define-method set_month
  (of-object "GDate")
  (c-name "g_date_set_month")
  (return-type "none")
  (parameters
    '("GDateMonth" "month")
  )
)

(define-method set_parse
  (of-object "GDate")
  (c-name "g_date_set_parse")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method set_time
  (of-object "GDate")
  (c-name "g_date_set_time")
  (return-type "none")
  (parameters
    '("GTime" "time_")
  )
)

(define-method set_time_t
  (of-object "GDate")
  (c-name "g_date_set_time_t")
  (return-type "none")
  (parameters
    '("time_t" "timet")
  )
)

(define-method set_time_val
  (of-object "GDate")
  (c-name "g_date_set_time_val")
  (return-type "none")
  (parameters
    '("GTimeVal*" "timeval")
  )
)

(define-method set_year
  (of-object "GDate")
  (c-name "g_date_set_year")
  (return-type "none")
  (parameters
    '("GDateYear" "year")
  )
)

(define-method subtract_days
  (of-object "GDate")
  (c-name "g_date_subtract_days")
  (return-type "none")
  (parameters
    '("guint" "n_days")
  )
)

(define-method subtract_months
  (of-object "GDate")
  (c-name "g_date_subtract_months")
  (return-type "none")
  (parameters
    '("guint" "n_months")
  )
)

(define-method subtract_years
  (of-object "GDate")
  (c-name "g_date_subtract_years")
  (return-type "none")
  (parameters
    '("guint" "n_years")
  )
)

(define-method to_struct_tm
  (of-object "GDate")
  (c-name "g_date_to_struct_tm")
  (return-type "none")
  (parameters
    '("tm*" "tm")
  )
)

(define-method valid
  (of-object "GDate")
  (c-name "g_date_valid")
  (return-type "gboolean")
)

(define-function new
  (c-name "g_date_time_new")
  (return-type "GDateTime*")
  (parameters
    '("GTimeZone*" "tz")
    '("gint" "year")
    '("gint" "month")
    '("gint" "day")
    '("gint" "hour")
    '("gint" "minute")
    '("gdouble" "seconds")
  )
)

(define-function new_from_timeval_local
  (c-name "g_date_time_new_from_timeval_local")
  (return-type "GDateTime*")
  (parameters
    '("const-GTimeVal*" "tv")
  )
)

(define-function new_from_timeval_utc
  (c-name "g_date_time_new_from_timeval_utc")
  (return-type "GDateTime*")
  (parameters
    '("const-GTimeVal*" "tv")
  )
)

(define-function new_from_unix_local
  (c-name "g_date_time_new_from_unix_local")
  (return-type "GDateTime*")
  (parameters
    '("gint64" "t")
  )
)

(define-function new_from_unix_utc
  (c-name "g_date_time_new_from_unix_utc")
  (return-type "GDateTime*")
  (parameters
    '("gint64" "t")
  )
)

(define-function new_local
  (c-name "g_date_time_new_local")
  (return-type "GDateTime*")
  (parameters
    '("gint" "year")
    '("gint" "month")
    '("gint" "day")
    '("gint" "hour")
    '("gint" "minute")
    '("gdouble" "seconds")
  )
)

(define-function new_now
  (c-name "g_date_time_new_now")
  (return-type "GDateTime*")
  (parameters
    '("GTimeZone*" "tz")
  )
)

(define-function new_now_local
  (c-name "g_date_time_new_now_local")
  (return-type "GDateTime*")
)

(define-function new_now_utc
  (c-name "g_date_time_new_now_utc")
  (return-type "GDateTime*")
)

(define-function new_utc
  (c-name "g_date_time_new_utc")
  (return-type "GDateTime*")
  (parameters
    '("gint" "year")
    '("gint" "month")
    '("gint" "day")
    '("gint" "hour")
    '("gint" "minute")
    '("gdouble" "seconds")
  )
)

(define-method add
  (of-object "GDateTime")
  (c-name "g_date_time_add")
  (return-type "GDateTime*")
  (parameters
    '("GTimeSpan" "timespan")
  )
)

(define-method add_days
  (of-object "GDateTime")
  (c-name "g_date_time_add_days")
  (return-type "GDateTime*")
  (parameters
    '("gint" "days")
  )
)

(define-method add_full
  (of-object "GDateTime")
  (c-name "g_date_time_add_full")
  (return-type "GDateTime*")
  (parameters
    '("gint" "years")
    '("gint" "months")
    '("gint" "days")
    '("gint" "hours")
    '("gint" "minutes")
    '("gdouble" "seconds")
  )
)

(define-method add_hours
  (of-object "GDateTime")
  (c-name "g_date_time_add_hours")
  (return-type "GDateTime*")
  (parameters
    '("gint" "hours")
  )
)

(define-method add_minutes
  (of-object "GDateTime")
  (c-name "g_date_time_add_minutes")
  (return-type "GDateTime*")
  (parameters
    '("gint" "minutes")
  )
)

(define-method add_months
  (of-object "GDateTime")
  (c-name "g_date_time_add_months")
  (return-type "GDateTime*")
  (parameters
    '("gint" "months")
  )
)

(define-method add_seconds
  (of-object "GDateTime")
  (c-name "g_date_time_add_seconds")
  (return-type "GDateTime*")
  (parameters
    '("gdouble" "seconds")
  )
)

(define-method add_weeks
  (of-object "GDateTime")
  (c-name "g_date_time_add_weeks")
  (return-type "GDateTime*")
  (parameters
    '("gint" "weeks")
  )
)

(define-method add_years
  (of-object "GDateTime")
  (c-name "g_date_time_add_years")
  (return-type "GDateTime*")
  (parameters
    '("gint" "years")
  )
)

(define-method difference
  (of-object "GDateTime")
  (c-name "g_date_time_difference")
  (return-type "GTimeSpan")
  (parameters
    '("GDateTime*" "begin")
  )
)

(define-method format
  (of-object "GDateTime")
  (c-name "g_date_time_format")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-method get_day_of_month
  (of-object "GDateTime")
  (c-name "g_date_time_get_day_of_month")
  (return-type "gint")
)

(define-method get_day_of_week
  (of-object "GDateTime")
  (c-name "g_date_time_get_day_of_week")
  (return-type "gint")
)

(define-method get_day_of_year
  (of-object "GDateTime")
  (c-name "g_date_time_get_day_of_year")
  (return-type "gint")
)

(define-method get_hour
  (of-object "GDateTime")
  (c-name "g_date_time_get_hour")
  (return-type "gint")
)

(define-method get_microsecond
  (of-object "GDateTime")
  (c-name "g_date_time_get_microsecond")
  (return-type "gint")
)

(define-method get_minute
  (of-object "GDateTime")
  (c-name "g_date_time_get_minute")
  (return-type "gint")
)

(define-method get_month
  (of-object "GDateTime")
  (c-name "g_date_time_get_month")
  (return-type "gint")
)

(define-method get_second
  (of-object "GDateTime")
  (c-name "g_date_time_get_second")
  (return-type "gint")
)

(define-method get_seconds
  (of-object "GDateTime")
  (c-name "g_date_time_get_seconds")
  (return-type "gdouble")
)

(define-method get_timezone_abbreviation
  (of-object "GDateTime")
  (c-name "g_date_time_get_timezone_abbreviation")
  (return-type "const-gchar*")
)

(define-method get_utc_offset
  (of-object "GDateTime")
  (c-name "g_date_time_get_utc_offset")
  (return-type "GTimeSpan")
)

(define-method get_week_numbering_year
  (of-object "GDateTime")
  (c-name "g_date_time_get_week_numbering_year")
  (return-type "gint")
)

(define-method get_week_of_year
  (of-object "GDateTime")
  (c-name "g_date_time_get_week_of_year")
  (return-type "gint")
)

(define-method get_year
  (of-object "GDateTime")
  (c-name "g_date_time_get_year")
  (return-type "gint")
)

(define-method get_ymd
  (of-object "GDateTime")
  (c-name "g_date_time_get_ymd")
  (return-type "none")
  (parameters
    '("gint*" "year")
    '("gint*" "month")
    '("gint*" "day")
  )
)

(define-method is_daylight_savings
  (of-object "GDateTime")
  (c-name "g_date_time_is_daylight_savings")
  (return-type "gboolean")
)

(define-method ref
  (of-object "GDateTime")
  (c-name "g_date_time_ref")
  (return-type "GDateTime*")
)

(define-method to_local
  (of-object "GDateTime")
  (c-name "g_date_time_to_local")
  (return-type "GDateTime*")
)

(define-method to_timeval
  (of-object "GDateTime")
  (c-name "g_date_time_to_timeval")
  (return-type "gboolean")
  (parameters
    '("GTimeVal*" "tv")
  )
)

(define-method to_timezone
  (of-object "GDateTime")
  (c-name "g_date_time_to_timezone")
  (return-type "GDateTime*")
  (parameters
    '("GTimeZone*" "tz")
  )
)

(define-method to_unix
  (of-object "GDateTime")
  (c-name "g_date_time_to_unix")
  (return-type "gint64")
)

(define-method to_utc
  (of-object "GDateTime")
  (c-name "g_date_time_to_utc")
  (return-type "GDateTime*")
)

(define-method unref
  (of-object "GDateTime")
  (c-name "g_date_time_unref")
  (return-type "none")
)

(define-method close
  (of-object "GDir")
  (c-name "g_dir_close")
  (return-type "none")
)

(define-method read_name
  (of-object "GDir")
  (c-name "g_dir_read_name")
  (return-type "const-gchar*")
)

(define-method rewind
  (of-object "GDir")
  (c-name "g_dir_rewind")
  (return-type "none")
)

(define-function new
  (c-name "g_error_new")
  (return-type "GError*")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-gchar*" "format")
  )
)

(define-function new_literal
  (c-name "g_error_new_literal")
  (return-type "GError*")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-gchar*" "message")
  )
)

(define-function new_valist
  (c-name "g_error_new_valist")
  (return-type "GError*")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-gchar*" "format")
    '("va_list" "args")
  )
)

(define-method copy
  (of-object "GError")
  (c-name "g_error_copy")
  (return-type "GError*")
)

(define-method free
  (of-object "GError")
  (c-name "g_error_free")
  (return-type "none")
)

(define-method matches
  (of-object "GError")
  (c-name "g_error_matches")
  (return-type "gboolean")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
  )
)

(define-method get_hash_table
  (of-object "GHashTableIter")
  (c-name "g_hash_table_iter_get_hash_table")
  (return-type "GHashTable*")
)

(define-method init
  (of-object "GHashTableIter")
  (c-name "g_hash_table_iter_init")
  (return-type "none")
  (parameters
    '("GHashTable*" "hash_table")
  )
)

(define-method next
  (of-object "GHashTableIter")
  (c-name "g_hash_table_iter_next")
  (return-type "gboolean")
  (parameters
    '("gpointer*" "key")
    '("gpointer*" "value")
  )
)

(define-method remove
  (of-object "GHashTableIter")
  (c-name "g_hash_table_iter_remove")
  (return-type "none")
)

(define-method replace
  (of-object "GHashTableIter")
  (c-name "g_hash_table_iter_replace")
  (return-type "none")
  (parameters
    '("gpointer" "value")
  )
)

(define-method steal
  (of-object "GHashTableIter")
  (c-name "g_hash_table_iter_steal")
  (return-type "none")
)

(define-method copy
  (of-object "GHmac")
  (c-name "g_hmac_copy")
  (return-type "GHmac*")
)

(define-method get_digest
  (of-object "GHmac")
  (c-name "g_hmac_get_digest")
  (return-type "none")
  (parameters
    '("guint8*" "buffer")
    '("gsize*" "digest_len")
  )
)

(define-method get_string
  (of-object "GHmac")
  (c-name "g_hmac_get_string")
  (return-type "const-gchar*")
)

(define-method ref
  (of-object "GHmac")
  (c-name "g_hmac_ref")
  (return-type "GHmac*")
)

(define-method unref
  (of-object "GHmac")
  (c-name "g_hmac_unref")
  (return-type "none")
)

(define-method update
  (of-object "GHmac")
  (c-name "g_hmac_update")
  (return-type "none")
  (parameters
    '("const-guchar*" "data")
    '("gssize" "length")
  )
)

(define-method compare_ids
  (of-object "GHook")
  (c-name "g_hook_compare_ids")
  (return-type "gint")
  (parameters
    '("GHook*" "sibling")
  )
)

(define-method clear
  (of-object "GHookList")
  (c-name "g_hook_list_clear")
  (return-type "none")
)

(define-method init
  (of-object "GHookList")
  (c-name "g_hook_list_init")
  (return-type "none")
  (parameters
    '("guint" "hook_size")
  )
)

(define-method invoke
  (of-object "GHookList")
  (c-name "g_hook_list_invoke")
  (return-type "none")
  (parameters
    '("gboolean" "may_recurse")
  )
)

(define-method invoke_check
  (of-object "GHookList")
  (c-name "g_hook_list_invoke_check")
  (return-type "none")
  (parameters
    '("gboolean" "may_recurse")
  )
)

(define-method marshal
  (of-object "GHookList")
  (c-name "g_hook_list_marshal")
  (return-type "none")
  (parameters
    '("gboolean" "may_recurse")
    '("GHookMarshaller" "marshaller")
    '("gpointer" "marshal_data")
  )
)

(define-method marshal_check
  (of-object "GHookList")
  (c-name "g_hook_list_marshal_check")
  (return-type "none")
  (parameters
    '("gboolean" "may_recurse")
    '("GHookCheckMarshaller" "marshaller")
    '("gpointer" "marshal_data")
  )
)

(define-method 
  (of-object "GIConv")
  (c-name "g_iconv")
  (return-type "gsize")
  (parameters
    '("gchar**" "inbuf")
    '("gsize*" "inbytes_left")
    '("gchar**" "outbuf")
    '("gsize*" "outbytes_left")
  )
)

(define-method close
  (of-object "GIConv")
  (c-name "g_iconv_close")
  (return-type "gint")
)

(define-function new_file
  (c-name "g_io_channel_new_file")
  (return-type "GIOChannel*")
  (parameters
    '("const-gchar*" "filename")
    '("const-gchar*" "mode")
    '("GError**" "error")
  )
)

(define-function unix_new
  (c-name "g_io_channel_unix_new")
  (return-type "GIOChannel*")
  (parameters
    '("int" "fd")
  )
)

(define-method close
  (of-object "GIOChannel")
  (c-name "g_io_channel_close")
  (return-type "none")
)

(define-method flush
  (of-object "GIOChannel")
  (c-name "g_io_channel_flush")
  (return-type "GIOStatus")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_buffer_condition
  (of-object "GIOChannel")
  (c-name "g_io_channel_get_buffer_condition")
  (return-type "GIOCondition")
)

(define-method get_buffer_size
  (of-object "GIOChannel")
  (c-name "g_io_channel_get_buffer_size")
  (return-type "gsize")
)

(define-method get_buffered
  (of-object "GIOChannel")
  (c-name "g_io_channel_get_buffered")
  (return-type "gboolean")
)

(define-method get_close_on_unref
  (of-object "GIOChannel")
  (c-name "g_io_channel_get_close_on_unref")
  (return-type "gboolean")
)

(define-method get_encoding
  (of-object "GIOChannel")
  (c-name "g_io_channel_get_encoding")
  (return-type "const-gchar*")
)

(define-method get_flags
  (of-object "GIOChannel")
  (c-name "g_io_channel_get_flags")
  (return-type "GIOFlags")
)

(define-method get_line_term
  (of-object "GIOChannel")
  (c-name "g_io_channel_get_line_term")
  (return-type "const-gchar*")
  (parameters
    '("gint*" "length")
  )
)

(define-method init
  (of-object "GIOChannel")
  (c-name "g_io_channel_init")
  (return-type "none")
)

(define-method read
  (of-object "GIOChannel")
  (c-name "g_io_channel_read")
  (return-type "GIOError")
  (parameters
    '("gchar*" "buf")
    '("gsize" "count")
    '("gsize*" "bytes_read")
  )
)

(define-method read_chars
  (of-object "GIOChannel")
  (c-name "g_io_channel_read_chars")
  (return-type "GIOStatus")
  (parameters
    '("gchar*" "buf")
    '("gsize" "count")
    '("gsize*" "bytes_read")
    '("GError**" "error")
  )
)

(define-method read_line
  (of-object "GIOChannel")
  (c-name "g_io_channel_read_line")
  (return-type "GIOStatus")
  (parameters
    '("gchar**" "str_return")
    '("gsize*" "length")
    '("gsize*" "terminator_pos")
    '("GError**" "error")
  )
)

(define-method read_line_string
  (of-object "GIOChannel")
  (c-name "g_io_channel_read_line_string")
  (return-type "GIOStatus")
  (parameters
    '("GString*" "buffer")
    '("gsize*" "terminator_pos")
    '("GError**" "error")
  )
)

(define-method read_to_end
  (of-object "GIOChannel")
  (c-name "g_io_channel_read_to_end")
  (return-type "GIOStatus")
  (parameters
    '("gchar**" "str_return")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method read_unichar
  (of-object "GIOChannel")
  (c-name "g_io_channel_read_unichar")
  (return-type "GIOStatus")
  (parameters
    '("gunichar*" "thechar")
    '("GError**" "error")
  )
)

(define-method ref
  (of-object "GIOChannel")
  (c-name "g_io_channel_ref")
  (return-type "GIOChannel*")
)

(define-method seek
  (of-object "GIOChannel")
  (c-name "g_io_channel_seek")
  (return-type "GIOError")
  (parameters
    '("gint64" "offset")
    '("GSeekType" "type")
  )
)

(define-method seek_position
  (of-object "GIOChannel")
  (c-name "g_io_channel_seek_position")
  (return-type "GIOStatus")
  (parameters
    '("gint64" "offset")
    '("GSeekType" "type")
    '("GError**" "error")
  )
)

(define-method set_buffer_size
  (of-object "GIOChannel")
  (c-name "g_io_channel_set_buffer_size")
  (return-type "none")
  (parameters
    '("gsize" "size")
  )
)

(define-method set_buffered
  (of-object "GIOChannel")
  (c-name "g_io_channel_set_buffered")
  (return-type "none")
  (parameters
    '("gboolean" "buffered")
  )
)

(define-method set_close_on_unref
  (of-object "GIOChannel")
  (c-name "g_io_channel_set_close_on_unref")
  (return-type "none")
  (parameters
    '("gboolean" "do_close")
  )
)

(define-method set_encoding
  (of-object "GIOChannel")
  (c-name "g_io_channel_set_encoding")
  (return-type "GIOStatus")
  (parameters
    '("const-gchar*" "encoding")
    '("GError**" "error")
  )
)

(define-method set_flags
  (of-object "GIOChannel")
  (c-name "g_io_channel_set_flags")
  (return-type "GIOStatus")
  (parameters
    '("GIOFlags" "flags")
    '("GError**" "error")
  )
)

(define-method set_line_term
  (of-object "GIOChannel")
  (c-name "g_io_channel_set_line_term")
  (return-type "none")
  (parameters
    '("const-gchar*" "line_term")
    '("gint" "length")
  )
)

(define-method shutdown
  (of-object "GIOChannel")
  (c-name "g_io_channel_shutdown")
  (return-type "GIOStatus")
  (parameters
    '("gboolean" "flush")
    '("GError**" "error")
  )
)

(define-method unix_get_fd
  (of-object "GIOChannel")
  (c-name "g_io_channel_unix_get_fd")
  (return-type "gint")
)

(define-method unref
  (of-object "GIOChannel")
  (c-name "g_io_channel_unref")
  (return-type "none")
)

(define-method write
  (of-object "GIOChannel")
  (c-name "g_io_channel_write")
  (return-type "GIOError")
  (parameters
    '("const-gchar*" "buf")
    '("gsize" "count")
    '("gsize*" "bytes_written")
  )
)

(define-method write_chars
  (of-object "GIOChannel")
  (c-name "g_io_channel_write_chars")
  (return-type "GIOStatus")
  (parameters
    '("const-gchar*" "buf")
    '("gssize" "count")
    '("gsize*" "bytes_written")
    '("GError**" "error")
  )
)

(define-method write_unichar
  (of-object "GIOChannel")
  (c-name "g_io_channel_write_unichar")
  (return-type "GIOStatus")
  (parameters
    '("gunichar" "thechar")
    '("GError**" "error")
  )
)

(define-function new
  (c-name "g_key_file_new")
  (return-type "GKeyFile*")
)

(define-method free
  (of-object "GKeyFile")
  (c-name "g_key_file_free")
  (return-type "none")
)

(define-method get_boolean
  (of-object "GKeyFile")
  (c-name "g_key_file_get_boolean")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method get_boolean_list
  (of-object "GKeyFile")
  (c-name "g_key_file_get_boolean_list")
  (return-type "const-gboolean*")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_comment
  (of-object "GKeyFile")
  (c-name "g_key_file_get_comment")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method get_double
  (of-object "GKeyFile")
  (c-name "g_key_file_get_double")
  (return-type "gdouble")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method get_double_list
  (of-object "GKeyFile")
  (c-name "g_key_file_get_double_list")
  (return-type "const-gdouble*")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_groups
  (of-object "GKeyFile")
  (c-name "g_key_file_get_groups")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method get_int64
  (of-object "GKeyFile")
  (c-name "g_key_file_get_int64")
  (return-type "gint64")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method get_integer
  (of-object "GKeyFile")
  (c-name "g_key_file_get_integer")
  (return-type "gint")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method get_integer_list
  (of-object "GKeyFile")
  (c-name "g_key_file_get_integer_list")
  (return-type "const-gint*")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_keys
  (of-object "GKeyFile")
  (c-name "g_key_file_get_keys")
  (return-type "const-gchar**")
  (parameters
    '("const-gchar*" "group_name")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_locale_string
  (of-object "GKeyFile")
  (c-name "g_key_file_get_locale_string")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "locale")
    '("GError**" "error")
  )
)

(define-method get_locale_string_list
  (of-object "GKeyFile")
  (c-name "g_key_file_get_locale_string_list")
  (return-type "const-gchar**")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "locale")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_start_group
  (of-object "GKeyFile")
  (c-name "g_key_file_get_start_group")
  (return-type "gchar*")
)

(define-method get_string
  (of-object "GKeyFile")
  (c-name "g_key_file_get_string")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method get_string_list
  (of-object "GKeyFile")
  (c-name "g_key_file_get_string_list")
  (return-type "const-gchar**")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method get_uint64
  (of-object "GKeyFile")
  (c-name "g_key_file_get_uint64")
  (return-type "guint64")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method get_value
  (of-object "GKeyFile")
  (c-name "g_key_file_get_value")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method has_group
  (of-object "GKeyFile")
  (c-name "g_key_file_has_group")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
  )
)

(define-method has_key
  (of-object "GKeyFile")
  (c-name "g_key_file_has_key")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method load_from_data
  (of-object "GKeyFile")
  (c-name "g_key_file_load_from_data")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "data")
    '("gsize" "length")
    '("GKeyFileFlags" "flags")
    '("GError**" "error")
  )
)

(define-method load_from_data_dirs
  (of-object "GKeyFile")
  (c-name "g_key_file_load_from_data_dirs")
  (return-type "gboolean")
  (parameters
    '("gchar*" "file")
    '("gchar**" "full_path")
    '("GKeyFileFlags" "flags")
    '("GError**" "error")
  )
)

(define-method load_from_dirs
  (of-object "GKeyFile")
  (c-name "g_key_file_load_from_dirs")
  (return-type "gboolean")
  (parameters
    '("gchar*" "file")
    '("const-gchar**" "search_dirs")
    '("gchar**" "full_path")
    '("GKeyFileFlags" "flags")
    '("GError**" "error")
  )
)

(define-method load_from_file
  (of-object "GKeyFile")
  (c-name "g_key_file_load_from_file")
  (return-type "gboolean")
  (parameters
    '("gchar*" "file")
    '("GKeyFileFlags" "flags")
    '("GError**" "error")
  )
)

(define-method ref
  (of-object "GKeyFile")
  (c-name "g_key_file_ref")
  (return-type "GKeyFile*")
)

(define-method remove_comment
  (of-object "GKeyFile")
  (c-name "g_key_file_remove_comment")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method remove_group
  (of-object "GKeyFile")
  (c-name "g_key_file_remove_group")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method remove_key
  (of-object "GKeyFile")
  (c-name "g_key_file_remove_key")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("GError**" "error")
  )
)

(define-method save_to_file
  (of-object "GKeyFile")
  (c-name "g_key_file_save_to_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method set_boolean
  (of-object "GKeyFile")
  (c-name "g_key_file_set_boolean")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gboolean" "value")
  )
)

(define-method set_boolean_list
  (of-object "GKeyFile")
  (c-name "g_key_file_set_boolean_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gboolean" "list")
    '("gsize" "length")
  )
)

(define-method set_comment
  (of-object "GKeyFile")
  (c-name "g_key_file_set_comment")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "comment")
    '("GError**" "error")
  )
)

(define-method set_double
  (of-object "GKeyFile")
  (c-name "g_key_file_set_double")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gdouble" "value")
  )
)

(define-method set_double_list
  (of-object "GKeyFile")
  (c-name "g_key_file_set_double_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gdouble" "list")
    '("gsize" "length")
  )
)

(define-method set_int64
  (of-object "GKeyFile")
  (c-name "g_key_file_set_int64")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gint64" "value")
  )
)

(define-method set_integer
  (of-object "GKeyFile")
  (c-name "g_key_file_set_integer")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("gint" "value")
  )
)

(define-method set_integer_list
  (of-object "GKeyFile")
  (c-name "g_key_file_set_integer_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gint" "list")
    '("gsize" "length")
  )
)

(define-method set_list_separator
  (of-object "GKeyFile")
  (c-name "g_key_file_set_list_separator")
  (return-type "none")
  (parameters
    '("gchar" "separator")
  )
)

(define-method set_locale_string
  (of-object "GKeyFile")
  (c-name "g_key_file_set_locale_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "locale")
    '("const-gchar*" "string")
  )
)

(define-method set_locale_string_list
  (of-object "GKeyFile")
  (c-name "g_key_file_set_locale_string_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "locale")
    '("const-gchar*" "list")
    '("gsize" "length")
  )
)

(define-method set_string
  (of-object "GKeyFile")
  (c-name "g_key_file_set_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "string")
  )
)

(define-method set_string_list
  (of-object "GKeyFile")
  (c-name "g_key_file_set_string_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "list")
    '("gsize" "length")
  )
)

(define-method set_uint64
  (of-object "GKeyFile")
  (c-name "g_key_file_set_uint64")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("guint64" "value")
  )
)

(define-method set_value
  (of-object "GKeyFile")
  (c-name "g_key_file_set_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "group_name")
    '("const-gchar*" "key")
    '("const-gchar*" "value")
  )
)

(define-method to_data
  (of-object "GKeyFile")
  (c-name "g_key_file_to_data")
  (return-type "gchar*")
  (parameters
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method unref
  (of-object "GKeyFile")
  (c-name "g_key_file_unref")
  (return-type "none")
)

(define-function new
  (c-name "g_main_context_new")
  (return-type "GMainContext*")
)

(define-method acquire
  (of-object "GMainContext")
  (c-name "g_main_context_acquire")
  (return-type "gboolean")
)

(define-method add_poll
  (of-object "GMainContext")
  (c-name "g_main_context_add_poll")
  (return-type "none")
  (parameters
    '("GPollFD*" "fd")
    '("gint" "priority")
  )
)

(define-method check
  (of-object "GMainContext")
  (c-name "g_main_context_check")
  (return-type "gint")
  (parameters
    '("gint" "max_priority")
    '("const-GPollFD*" "fds")
    '("gint" "n_fds")
  )
)

(define-method dispatch
  (of-object "GMainContext")
  (c-name "g_main_context_dispatch")
  (return-type "none")
)

(define-method find_source_by_funcs_user_data
  (of-object "GMainContext")
  (c-name "g_main_context_find_source_by_funcs_user_data")
  (return-type "GSource*")
  (parameters
    '("GSourceFuncs*" "funcs")
    '("gpointer" "user_data")
  )
)

(define-method find_source_by_id
  (of-object "GMainContext")
  (c-name "g_main_context_find_source_by_id")
  (return-type "GSource*")
  (parameters
    '("guint" "source_id")
  )
)

(define-method find_source_by_user_data
  (of-object "GMainContext")
  (c-name "g_main_context_find_source_by_user_data")
  (return-type "GSource*")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method get_poll_func
  (of-object "GMainContext")
  (c-name "g_main_context_get_poll_func")
  (return-type "GPollFunc")
)

(define-method invoke
  (of-object "GMainContext")
  (c-name "g_main_context_invoke")
  (return-type "none")
  (parameters
    '("GSourceFunc" "function")
    '("gpointer" "data")
  )
)

(define-method invoke_full
  (of-object "GMainContext")
  (c-name "g_main_context_invoke_full")
  (return-type "none")
  (parameters
    '("gint" "priority")
    '("GSourceFunc" "function")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method is_owner
  (of-object "GMainContext")
  (c-name "g_main_context_is_owner")
  (return-type "gboolean")
)

(define-method iteration
  (of-object "GMainContext")
  (c-name "g_main_context_iteration")
  (return-type "gboolean")
  (parameters
    '("gboolean" "may_block")
  )
)

(define-method pending
  (of-object "GMainContext")
  (c-name "g_main_context_pending")
  (return-type "gboolean")
)

(define-method pop_thread_default
  (of-object "GMainContext")
  (c-name "g_main_context_pop_thread_default")
  (return-type "none")
)

(define-method prepare
  (of-object "GMainContext")
  (c-name "g_main_context_prepare")
  (return-type "gboolean")
  (parameters
    '("gint*" "priority")
  )
)

(define-method push_thread_default
  (of-object "GMainContext")
  (c-name "g_main_context_push_thread_default")
  (return-type "none")
)

(define-method query
  (of-object "GMainContext")
  (c-name "g_main_context_query")
  (return-type "gint")
  (parameters
    '("gint" "max_priority")
    '("gint*" "timeout_")
    '("GPollFD*" "fds")
    '("gint" "n_fds")
  )
)

(define-method ref
  (of-object "GMainContext")
  (c-name "g_main_context_ref")
  (return-type "GMainContext*")
)

(define-method release
  (of-object "GMainContext")
  (c-name "g_main_context_release")
  (return-type "none")
)

(define-method remove_poll
  (of-object "GMainContext")
  (c-name "g_main_context_remove_poll")
  (return-type "none")
  (parameters
    '("GPollFD*" "fd")
  )
)

(define-method set_poll_func
  (of-object "GMainContext")
  (c-name "g_main_context_set_poll_func")
  (return-type "none")
  (parameters
    '("GPollFunc" "func")
  )
)

(define-method unref
  (of-object "GMainContext")
  (c-name "g_main_context_unref")
  (return-type "none")
)

(define-method wait
  (of-object "GMainContext")
  (c-name "g_main_context_wait")
  (return-type "gboolean")
  (parameters
    '("GCond*" "cond")
    '("GMutex*" "mutex")
  )
)

(define-method wakeup
  (of-object "GMainContext")
  (c-name "g_main_context_wakeup")
  (return-type "none")
)

(define-function new
  (c-name "g_main_loop_new")
  (return-type "GMainLoop*")
  (parameters
    '("GMainContext*" "context")
    '("gboolean" "is_running")
  )
)

(define-method get_context
  (of-object "GMainLoop")
  (c-name "g_main_loop_get_context")
  (return-type "GMainContext*")
)

(define-method is_running
  (of-object "GMainLoop")
  (c-name "g_main_loop_is_running")
  (return-type "gboolean")
)

(define-method quit
  (of-object "GMainLoop")
  (c-name "g_main_loop_quit")
  (return-type "none")
)

(define-method ref
  (of-object "GMainLoop")
  (c-name "g_main_loop_ref")
  (return-type "GMainLoop*")
)

(define-method run
  (of-object "GMainLoop")
  (c-name "g_main_loop_run")
  (return-type "none")
)

(define-method unref
  (of-object "GMainLoop")
  (c-name "g_main_loop_unref")
  (return-type "none")
)

(define-function new
  (c-name "g_mapped_file_new")
  (return-type "GMappedFile*")
  (parameters
    '("const-gchar*" "filename")
    '("gboolean" "writable")
    '("GError**" "error")
  )
)

(define-function new_from_fd
  (c-name "g_mapped_file_new_from_fd")
  (return-type "GMappedFile*")
  (parameters
    '("gint" "fd")
    '("gboolean" "writable")
    '("GError**" "error")
  )
)

(define-method free
  (of-object "GMappedFile")
  (c-name "g_mapped_file_free")
  (return-type "none")
)

(define-method get_bytes
  (of-object "GMappedFile")
  (c-name "g_mapped_file_get_bytes")
  (return-type "GBytes*")
)

(define-method get_contents
  (of-object "GMappedFile")
  (c-name "g_mapped_file_get_contents")
  (return-type "gchar*")
)

(define-method get_length
  (of-object "GMappedFile")
  (c-name "g_mapped_file_get_length")
  (return-type "gsize")
)

(define-method ref
  (of-object "GMappedFile")
  (c-name "g_mapped_file_ref")
  (return-type "GMappedFile*")
)

(define-method unref
  (of-object "GMappedFile")
  (c-name "g_mapped_file_unref")
  (return-type "none")
)

(define-function new
  (c-name "g_markup_parse_context_new")
  (return-type "GMarkupParseContext*")
  (parameters
    '("const-GMarkupParser*" "parser")
    '("GMarkupParseFlags" "flags")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_dnotify")
  )
)

(define-method end_parse
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_end_parse")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method free
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_free")
  (return-type "none")
)

(define-method get_element
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_get_element")
  (return-type "const-gchar*")
)

(define-method get_element_stack
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_get_element_stack")
  (return-type "const-GSList*")
)

(define-method get_position
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_get_position")
  (return-type "none")
  (parameters
    '("gint*" "line_number")
    '("gint*" "char_number")
  )
)

(define-method get_user_data
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_get_user_data")
  (return-type "gpointer")
)

(define-method parse
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_parse")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "text")
    '("gssize" "text_len")
    '("GError**" "error")
  )
)

(define-method pop
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_pop")
  (return-type "gpointer")
)

(define-method push
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_push")
  (return-type "none")
  (parameters
    '("const-GMarkupParser*" "parser")
    '("gpointer" "user_data")
  )
)

(define-method ref
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_ref")
  (return-type "GMarkupParseContext*")
)

(define-method unref
  (of-object "GMarkupParseContext")
  (c-name "g_markup_parse_context_unref")
  (return-type "none")
)

(define-method expand_references
  (of-object "GMatchInfo")
  (c-name "g_match_info_expand_references")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string_to_expand")
    '("GError**" "error")
  )
)

(define-method fetch
  (of-object "GMatchInfo")
  (c-name "g_match_info_fetch")
  (return-type "gchar*")
  (parameters
    '("gint" "match_num")
  )
)

(define-method fetch_all
  (of-object "GMatchInfo")
  (c-name "g_match_info_fetch_all")
  (return-type "const-gchar**")
)

(define-method fetch_named
  (of-object "GMatchInfo")
  (c-name "g_match_info_fetch_named")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method fetch_named_pos
  (of-object "GMatchInfo")
  (c-name "g_match_info_fetch_named_pos")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
    '("gint*" "start_pos")
    '("gint*" "end_pos")
  )
)

(define-method fetch_pos
  (of-object "GMatchInfo")
  (c-name "g_match_info_fetch_pos")
  (return-type "gboolean")
  (parameters
    '("gint" "match_num")
    '("gint*" "start_pos")
    '("gint*" "end_pos")
  )
)

(define-method free
  (of-object "GMatchInfo")
  (c-name "g_match_info_free")
  (return-type "none")
)

(define-method get_match_count
  (of-object "GMatchInfo")
  (c-name "g_match_info_get_match_count")
  (return-type "gint")
)

(define-method get_regex
  (of-object "GMatchInfo")
  (c-name "g_match_info_get_regex")
  (return-type "GRegex*")
)

(define-method get_string
  (of-object "GMatchInfo")
  (c-name "g_match_info_get_string")
  (return-type "const-gchar*")
)

(define-method is_partial_match
  (of-object "GMatchInfo")
  (c-name "g_match_info_is_partial_match")
  (return-type "gboolean")
)

(define-method matches
  (of-object "GMatchInfo")
  (c-name "g_match_info_matches")
  (return-type "gboolean")
)

(define-method next
  (of-object "GMatchInfo")
  (c-name "g_match_info_next")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method ref
  (of-object "GMatchInfo")
  (c-name "g_match_info_ref")
  (return-type "GMatchInfo*")
)

(define-method unref
  (of-object "GMatchInfo")
  (c-name "g_match_info_unref")
  (return-type "none")
)

(define-method child_index
  (of-object "GNode")
  (c-name "g_node_child_index")
  (return-type "gint")
  (parameters
    '("gpointer" "data")
  )
)

(define-method child_position
  (of-object "GNode")
  (c-name "g_node_child_position")
  (return-type "gint")
  (parameters
    '("GNode*" "child")
  )
)

(define-method children_foreach
  (of-object "GNode")
  (c-name "g_node_children_foreach")
  (return-type "none")
  (parameters
    '("GTraverseFlags" "flags")
    '("GNodeForeachFunc" "func")
    '("gpointer" "data")
  )
)

(define-method copy
  (of-object "GNode")
  (c-name "g_node_copy")
  (return-type "GNode*")
)

(define-method copy_deep
  (of-object "GNode")
  (c-name "g_node_copy_deep")
  (return-type "GNode*")
  (parameters
    '("GCopyFunc" "copy_func")
    '("gpointer" "data")
  )
)

(define-method depth
  (of-object "GNode")
  (c-name "g_node_depth")
  (return-type "guint")
)

(define-method destroy
  (of-object "GNode")
  (c-name "g_node_destroy")
  (return-type "none")
)

(define-method find
  (of-object "GNode")
  (c-name "g_node_find")
  (return-type "GNode*")
  (parameters
    '("GTraverseType" "order")
    '("GTraverseFlags" "flags")
    '("gpointer" "data")
  )
)

(define-method find_child
  (of-object "GNode")
  (c-name "g_node_find_child")
  (return-type "GNode*")
  (parameters
    '("GTraverseFlags" "flags")
    '("gpointer" "data")
  )
)

(define-method first_sibling
  (of-object "GNode")
  (c-name "g_node_first_sibling")
  (return-type "GNode*")
)

(define-method get_root
  (of-object "GNode")
  (c-name "g_node_get_root")
  (return-type "GNode*")
)

(define-method insert
  (of-object "GNode")
  (c-name "g_node_insert")
  (return-type "GNode*")
  (parameters
    '("gint" "position")
    '("GNode*" "node")
  )
)

(define-method insert_after
  (of-object "GNode")
  (c-name "g_node_insert_after")
  (return-type "GNode*")
  (parameters
    '("GNode*" "sibling")
    '("GNode*" "node")
  )
)

(define-method insert_before
  (of-object "GNode")
  (c-name "g_node_insert_before")
  (return-type "GNode*")
  (parameters
    '("GNode*" "sibling")
    '("GNode*" "node")
  )
)

(define-method is_ancestor
  (of-object "GNode")
  (c-name "g_node_is_ancestor")
  (return-type "gboolean")
  (parameters
    '("GNode*" "descendant")
  )
)

(define-method last_child
  (of-object "GNode")
  (c-name "g_node_last_child")
  (return-type "GNode*")
)

(define-method last_sibling
  (of-object "GNode")
  (c-name "g_node_last_sibling")
  (return-type "GNode*")
)

(define-method max_height
  (of-object "GNode")
  (c-name "g_node_max_height")
  (return-type "guint")
)

(define-method n_children
  (of-object "GNode")
  (c-name "g_node_n_children")
  (return-type "guint")
)

(define-method n_nodes
  (of-object "GNode")
  (c-name "g_node_n_nodes")
  (return-type "guint")
  (parameters
    '("GTraverseFlags" "flags")
  )
)

(define-method nth_child
  (of-object "GNode")
  (c-name "g_node_nth_child")
  (return-type "GNode*")
  (parameters
    '("guint" "n")
  )
)

(define-method prepend
  (of-object "GNode")
  (c-name "g_node_prepend")
  (return-type "GNode*")
  (parameters
    '("GNode*" "node")
  )
)

(define-method reverse_children
  (of-object "GNode")
  (c-name "g_node_reverse_children")
  (return-type "none")
)

(define-method traverse
  (of-object "GNode")
  (c-name "g_node_traverse")
  (return-type "none")
  (parameters
    '("GTraverseType" "order")
    '("GTraverseFlags" "flags")
    '("gint" "max_depth")
    '("GNodeTraverseFunc" "func")
    '("gpointer" "data")
  )
)

(define-method unlink
  (of-object "GNode")
  (c-name "g_node_unlink")
  (return-type "none")
)

(define-method impl
  (of-object "GOnce")
  (c-name "g_once_impl")
  (return-type "gpointer")
  (parameters
    '("GThreadFunc" "func")
    '("gpointer" "arg")
  )
)

(define-method add_group
  (of-object "GOptionContext")
  (c-name "g_option_context_add_group")
  (return-type "none")
  (parameters
    '("GOptionGroup*" "group")
  )
)

(define-method add_main_entries
  (of-object "GOptionContext")
  (c-name "g_option_context_add_main_entries")
  (return-type "none")
  (parameters
    '("const-GOptionEntry*" "entries")
    '("const-gchar*" "translation_domain")
  )
)

(define-method free
  (of-object "GOptionContext")
  (c-name "g_option_context_free")
  (return-type "none")
)

(define-method get_description
  (of-object "GOptionContext")
  (c-name "g_option_context_get_description")
  (return-type "const-gchar*")
)

(define-method get_help
  (of-object "GOptionContext")
  (c-name "g_option_context_get_help")
  (return-type "gchar*")
  (parameters
    '("gboolean" "main_help")
    '("GOptionGroup*" "group")
  )
)

(define-method get_help_enabled
  (of-object "GOptionContext")
  (c-name "g_option_context_get_help_enabled")
  (return-type "gboolean")
)

(define-method get_ignore_unknown_options
  (of-object "GOptionContext")
  (c-name "g_option_context_get_ignore_unknown_options")
  (return-type "gboolean")
)

(define-method get_main_group
  (of-object "GOptionContext")
  (c-name "g_option_context_get_main_group")
  (return-type "GOptionGroup*")
)

(define-method get_summary
  (of-object "GOptionContext")
  (c-name "g_option_context_get_summary")
  (return-type "const-gchar*")
)

(define-method parse
  (of-object "GOptionContext")
  (c-name "g_option_context_parse")
  (return-type "gboolean")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
    '("GError**" "error")
  )
)

(define-method parse_strv
  (of-object "GOptionContext")
  (c-name "g_option_context_parse_strv")
  (return-type "gboolean")
  (parameters
    '("gchar***" "arguments")
    '("GError**" "error")
  )
)

(define-method set_description
  (of-object "GOptionContext")
  (c-name "g_option_context_set_description")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-method set_help_enabled
  (of-object "GOptionContext")
  (c-name "g_option_context_set_help_enabled")
  (return-type "none")
  (parameters
    '("gboolean" "help_enabled")
  )
)

(define-method set_ignore_unknown_options
  (of-object "GOptionContext")
  (c-name "g_option_context_set_ignore_unknown_options")
  (return-type "none")
  (parameters
    '("gboolean" "ignore_unknown")
  )
)

(define-method set_main_group
  (of-object "GOptionContext")
  (c-name "g_option_context_set_main_group")
  (return-type "none")
  (parameters
    '("GOptionGroup*" "group")
  )
)

(define-method set_summary
  (of-object "GOptionContext")
  (c-name "g_option_context_set_summary")
  (return-type "none")
  (parameters
    '("const-gchar*" "summary")
  )
)

(define-method set_translate_func
  (of-object "GOptionContext")
  (c-name "g_option_context_set_translate_func")
  (return-type "none")
  (parameters
    '("GTranslateFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy_notify")
  )
)

(define-method set_translation_domain
  (of-object "GOptionContext")
  (c-name "g_option_context_set_translation_domain")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain")
  )
)

(define-method add_entries
  (of-object "GOptionGroup")
  (c-name "g_option_group_add_entries")
  (return-type "none")
  (parameters
    '("const-GOptionEntry*" "entries")
  )
)

(define-method free
  (of-object "GOptionGroup")
  (c-name "g_option_group_free")
  (return-type "none")
)

(define-method set_error_hook
  (of-object "GOptionGroup")
  (c-name "g_option_group_set_error_hook")
  (return-type "none")
  (parameters
    '("GOptionErrorFunc" "error_func")
  )
)

(define-method set_parse_hooks
  (of-object "GOptionGroup")
  (c-name "g_option_group_set_parse_hooks")
  (return-type "none")
  (parameters
    '("GOptionParseFunc" "pre_parse_func")
    '("GOptionParseFunc" "post_parse_func")
  )
)

(define-method set_translate_func
  (of-object "GOptionGroup")
  (c-name "g_option_group_set_translate_func")
  (return-type "none")
  (parameters
    '("GTranslateFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy_notify")
  )
)

(define-method set_translation_domain
  (of-object "GOptionGroup")
  (c-name "g_option_group_set_translation_domain")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain")
  )
)

(define-method equal
  (of-object "GPatternSpec")
  (c-name "g_pattern_spec_equal")
  (return-type "gboolean")
  (parameters
    '("GPatternSpec*" "pspec2")
  )
)

(define-method free
  (of-object "GPatternSpec")
  (c-name "g_pattern_spec_free")
  (return-type "none")
)

(define-method get
  (of-object "GPrivate")
  (c-name "g_private_get")
  (return-type "gpointer")
)

(define-method replace
  (of-object "GPrivate")
  (c-name "g_private_replace")
  (return-type "none")
  (parameters
    '("gpointer" "value")
  )
)

(define-method set
  (of-object "GPrivate")
  (c-name "g_private_set")
  (return-type "none")
  (parameters
    '("gpointer" "value")
  )
)

(define-method clear
  (of-object "GQueue")
  (c-name "g_queue_clear")
  (return-type "none")
)

(define-method copy
  (of-object "GQueue")
  (c-name "g_queue_copy")
  (return-type "GQueue*")
)

(define-method delete_link
  (of-object "GQueue")
  (c-name "g_queue_delete_link")
  (return-type "none")
  (parameters
    '("GList*" "link_")
  )
)

(define-method find
  (of-object "GQueue")
  (c-name "g_queue_find")
  (return-type "GList*")
  (parameters
    '("gconstpointer" "data")
  )
)

(define-method find_custom
  (of-object "GQueue")
  (c-name "g_queue_find_custom")
  (return-type "GList*")
  (parameters
    '("gconstpointer" "data")
    '("GCompareFunc" "func")
  )
)

(define-method foreach
  (of-object "GQueue")
  (c-name "g_queue_foreach")
  (return-type "none")
  (parameters
    '("GFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method free
  (of-object "GQueue")
  (c-name "g_queue_free")
  (return-type "none")
)

(define-method free_full
  (of-object "GQueue")
  (c-name "g_queue_free_full")
  (return-type "none")
  (parameters
    '("GDestroyNotify" "free_func")
  )
)

(define-method get_length
  (of-object "GQueue")
  (c-name "g_queue_get_length")
  (return-type "guint")
)

(define-method index
  (of-object "GQueue")
  (c-name "g_queue_index")
  (return-type "gint")
  (parameters
    '("gconstpointer" "data")
  )
)

(define-method init
  (of-object "GQueue")
  (c-name "g_queue_init")
  (return-type "none")
)

(define-method insert_after
  (of-object "GQueue")
  (c-name "g_queue_insert_after")
  (return-type "none")
  (parameters
    '("GList*" "sibling")
    '("gpointer" "data")
  )
)

(define-method insert_before
  (of-object "GQueue")
  (c-name "g_queue_insert_before")
  (return-type "none")
  (parameters
    '("GList*" "sibling")
    '("gpointer" "data")
  )
)

(define-method insert_sorted
  (of-object "GQueue")
  (c-name "g_queue_insert_sorted")
  (return-type "none")
  (parameters
    '("gpointer" "data")
    '("GCompareDataFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method is_empty
  (of-object "GQueue")
  (c-name "g_queue_is_empty")
  (return-type "gboolean")
)

(define-method link_index
  (of-object "GQueue")
  (c-name "g_queue_link_index")
  (return-type "gint")
  (parameters
    '("GList*" "link_")
  )
)

(define-method peek_head
  (of-object "GQueue")
  (c-name "g_queue_peek_head")
  (return-type "gpointer")
)

(define-method peek_head_link
  (of-object "GQueue")
  (c-name "g_queue_peek_head_link")
  (return-type "GList*")
)

(define-method peek_nth
  (of-object "GQueue")
  (c-name "g_queue_peek_nth")
  (return-type "gpointer")
  (parameters
    '("guint" "n")
  )
)

(define-method peek_nth_link
  (of-object "GQueue")
  (c-name "g_queue_peek_nth_link")
  (return-type "GList*")
  (parameters
    '("guint" "n")
  )
)

(define-method peek_tail
  (of-object "GQueue")
  (c-name "g_queue_peek_tail")
  (return-type "gpointer")
)

(define-method peek_tail_link
  (of-object "GQueue")
  (c-name "g_queue_peek_tail_link")
  (return-type "GList*")
)

(define-method pop_head
  (of-object "GQueue")
  (c-name "g_queue_pop_head")
  (return-type "gpointer")
)

(define-method pop_head_link
  (of-object "GQueue")
  (c-name "g_queue_pop_head_link")
  (return-type "GList*")
)

(define-method pop_nth
  (of-object "GQueue")
  (c-name "g_queue_pop_nth")
  (return-type "gpointer")
  (parameters
    '("guint" "n")
  )
)

(define-method pop_nth_link
  (of-object "GQueue")
  (c-name "g_queue_pop_nth_link")
  (return-type "GList*")
  (parameters
    '("guint" "n")
  )
)

(define-method pop_tail
  (of-object "GQueue")
  (c-name "g_queue_pop_tail")
  (return-type "gpointer")
)

(define-method pop_tail_link
  (of-object "GQueue")
  (c-name "g_queue_pop_tail_link")
  (return-type "GList*")
)

(define-method push_head
  (of-object "GQueue")
  (c-name "g_queue_push_head")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method push_head_link
  (of-object "GQueue")
  (c-name "g_queue_push_head_link")
  (return-type "none")
  (parameters
    '("GList*" "link_")
  )
)

(define-method push_nth
  (of-object "GQueue")
  (c-name "g_queue_push_nth")
  (return-type "none")
  (parameters
    '("gpointer" "data")
    '("gint" "n")
  )
)

(define-method push_nth_link
  (of-object "GQueue")
  (c-name "g_queue_push_nth_link")
  (return-type "none")
  (parameters
    '("gint" "n")
    '("GList*" "link_")
  )
)

(define-method push_tail
  (of-object "GQueue")
  (c-name "g_queue_push_tail")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method push_tail_link
  (of-object "GQueue")
  (c-name "g_queue_push_tail_link")
  (return-type "none")
  (parameters
    '("GList*" "link_")
  )
)

(define-method remove
  (of-object "GQueue")
  (c-name "g_queue_remove")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "data")
  )
)

(define-method remove_all
  (of-object "GQueue")
  (c-name "g_queue_remove_all")
  (return-type "guint")
  (parameters
    '("gconstpointer" "data")
  )
)

(define-method reverse
  (of-object "GQueue")
  (c-name "g_queue_reverse")
  (return-type "none")
)

(define-method sort
  (of-object "GQueue")
  (c-name "g_queue_sort")
  (return-type "none")
  (parameters
    '("GCompareDataFunc" "compare_func")
    '("gpointer" "user_data")
  )
)

(define-method unlink
  (of-object "GQueue")
  (c-name "g_queue_unlink")
  (return-type "none")
  (parameters
    '("GList*" "link_")
  )
)

(define-method clear
  (of-object "GRWLock")
  (c-name "g_rw_lock_clear")
  (return-type "none")
)

(define-method init
  (of-object "GRWLock")
  (c-name "g_rw_lock_init")
  (return-type "none")
)

(define-method reader_lock
  (of-object "GRWLock")
  (c-name "g_rw_lock_reader_lock")
  (return-type "none")
)

(define-method reader_trylock
  (of-object "GRWLock")
  (c-name "g_rw_lock_reader_trylock")
  (return-type "gboolean")
)

(define-method reader_unlock
  (of-object "GRWLock")
  (c-name "g_rw_lock_reader_unlock")
  (return-type "none")
)

(define-method writer_lock
  (of-object "GRWLock")
  (c-name "g_rw_lock_writer_lock")
  (return-type "none")
)

(define-method writer_trylock
  (of-object "GRWLock")
  (c-name "g_rw_lock_writer_trylock")
  (return-type "gboolean")
)

(define-method writer_unlock
  (of-object "GRWLock")
  (c-name "g_rw_lock_writer_unlock")
  (return-type "none")
)

(define-method copy
  (of-object "GRand")
  (c-name "g_rand_copy")
  (return-type "GRand*")
)

(define-method double
  (of-object "GRand")
  (c-name "g_rand_double")
  (return-type "gdouble")
)

(define-method double_range
  (of-object "GRand")
  (c-name "g_rand_double_range")
  (return-type "gdouble")
  (parameters
    '("gdouble" "begin")
    '("gdouble" "end")
  )
)

(define-method free
  (of-object "GRand")
  (c-name "g_rand_free")
  (return-type "none")
)

(define-method int
  (of-object "GRand")
  (c-name "g_rand_int")
  (return-type "guint32")
)

(define-method int_range
  (of-object "GRand")
  (c-name "g_rand_int_range")
  (return-type "gint32")
  (parameters
    '("gint32" "begin")
    '("gint32" "end")
  )
)

(define-method set_seed
  (of-object "GRand")
  (c-name "g_rand_set_seed")
  (return-type "none")
  (parameters
    '("guint32" "seed")
  )
)

(define-method set_seed_array
  (of-object "GRand")
  (c-name "g_rand_set_seed_array")
  (return-type "none")
  (parameters
    '("const-guint32*" "seed")
    '("guint" "seed_length")
  )
)

(define-method clear
  (of-object "GRecMutex")
  (c-name "g_rec_mutex_clear")
  (return-type "none")
)

(define-method init
  (of-object "GRecMutex")
  (c-name "g_rec_mutex_init")
  (return-type "none")
)

(define-method lock
  (of-object "GRecMutex")
  (c-name "g_rec_mutex_lock")
  (return-type "none")
)

(define-method trylock
  (of-object "GRecMutex")
  (c-name "g_rec_mutex_trylock")
  (return-type "gboolean")
)

(define-method unlock
  (of-object "GRecMutex")
  (c-name "g_rec_mutex_unlock")
  (return-type "none")
)

(define-function new
  (c-name "g_regex_new")
  (return-type "GRegex*")
  (parameters
    '("const-gchar*" "pattern")
    '("GRegexCompileFlags" "compile_options")
    '("GRegexMatchFlags" "match_options")
    '("GError**" "error")
  )
)

(define-method get_capture_count
  (of-object "GRegex")
  (c-name "g_regex_get_capture_count")
  (return-type "gint")
)

(define-method get_compile_flags
  (of-object "GRegex")
  (c-name "g_regex_get_compile_flags")
  (return-type "GRegexCompileFlags")
)

(define-method get_has_cr_or_lf
  (of-object "GRegex")
  (c-name "g_regex_get_has_cr_or_lf")
  (return-type "gboolean")
)

(define-method get_match_flags
  (of-object "GRegex")
  (c-name "g_regex_get_match_flags")
  (return-type "GRegexMatchFlags")
)

(define-method get_max_backref
  (of-object "GRegex")
  (c-name "g_regex_get_max_backref")
  (return-type "gint")
)

(define-method get_max_lookbehind
  (of-object "GRegex")
  (c-name "g_regex_get_max_lookbehind")
  (return-type "gint")
)

(define-method get_pattern
  (of-object "GRegex")
  (c-name "g_regex_get_pattern")
  (return-type "const-gchar*")
)

(define-method get_string_number
  (of-object "GRegex")
  (c-name "g_regex_get_string_number")
  (return-type "gint")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method match
  (of-object "GRegex")
  (c-name "g_regex_match")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
    '("GRegexMatchFlags" "match_options")
    '("GMatchInfo**" "match_info")
  )
)

(define-method match_all
  (of-object "GRegex")
  (c-name "g_regex_match_all")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
    '("GRegexMatchFlags" "match_options")
    '("GMatchInfo**" "match_info")
  )
)

(define-method match_all_full
  (of-object "GRegex")
  (c-name "g_regex_match_all_full")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
    '("gssize" "string_len")
    '("gint" "start_position")
    '("GRegexMatchFlags" "match_options")
    '("GMatchInfo**" "match_info")
    '("GError**" "error")
  )
)

(define-method match_full
  (of-object "GRegex")
  (c-name "g_regex_match_full")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
    '("gssize" "string_len")
    '("gint" "start_position")
    '("GRegexMatchFlags" "match_options")
    '("GMatchInfo**" "match_info")
    '("GError**" "error")
  )
)

(define-method ref
  (of-object "GRegex")
  (c-name "g_regex_ref")
  (return-type "GRegex*")
)

(define-method replace
  (of-object "GRegex")
  (c-name "g_regex_replace")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string")
    '("gssize" "string_len")
    '("gint" "start_position")
    '("const-gchar*" "replacement")
    '("GRegexMatchFlags" "match_options")
    '("GError**" "error")
  )
)

(define-method replace_eval
  (of-object "GRegex")
  (c-name "g_regex_replace_eval")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string")
    '("gssize" "string_len")
    '("gint" "start_position")
    '("GRegexMatchFlags" "match_options")
    '("GRegexEvalCallback" "eval")
    '("gpointer" "user_data")
    '("GError**" "error")
  )
)

(define-method replace_literal
  (of-object "GRegex")
  (c-name "g_regex_replace_literal")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string")
    '("gssize" "string_len")
    '("gint" "start_position")
    '("const-gchar*" "replacement")
    '("GRegexMatchFlags" "match_options")
    '("GError**" "error")
  )
)

(define-method split
  (of-object "GRegex")
  (c-name "g_regex_split")
  (return-type "const-gchar**")
  (parameters
    '("const-gchar*" "string")
    '("GRegexMatchFlags" "match_options")
  )
)

(define-method split_full
  (of-object "GRegex")
  (c-name "g_regex_split_full")
  (return-type "const-gchar**")
  (parameters
    '("const-gchar*" "string")
    '("gssize" "string_len")
    '("gint" "start_position")
    '("GRegexMatchFlags" "match_options")
    '("gint" "max_tokens")
    '("GError**" "error")
  )
)

(define-method unref
  (of-object "GRegex")
  (c-name "g_regex_unref")
  (return-type "none")
)

(define-method cur_line
  (of-object "GScanner")
  (c-name "g_scanner_cur_line")
  (return-type "guint")
)

(define-method cur_position
  (of-object "GScanner")
  (c-name "g_scanner_cur_position")
  (return-type "guint")
)

(define-method cur_token
  (of-object "GScanner")
  (c-name "g_scanner_cur_token")
  (return-type "GTokenType")
)

(define-method cur_value
  (of-object "GScanner")
  (c-name "g_scanner_cur_value")
  (return-type "GTokenValue")
)

(define-method destroy
  (of-object "GScanner")
  (c-name "g_scanner_destroy")
  (return-type "none")
)

(define-method eof
  (of-object "GScanner")
  (c-name "g_scanner_eof")
  (return-type "gboolean")
)

(define-method error
  (of-object "GScanner")
  (c-name "g_scanner_error")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-method get_next_token
  (of-object "GScanner")
  (c-name "g_scanner_get_next_token")
  (return-type "GTokenType")
)

(define-method input_file
  (of-object "GScanner")
  (c-name "g_scanner_input_file")
  (return-type "none")
  (parameters
    '("gint" "input_fd")
  )
)

(define-method input_text
  (of-object "GScanner")
  (c-name "g_scanner_input_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("guint" "text_len")
  )
)

(define-method lookup_symbol
  (of-object "GScanner")
  (c-name "g_scanner_lookup_symbol")
  (return-type "gpointer")
  (parameters
    '("const-gchar*" "symbol")
  )
)

(define-method peek_next_token
  (of-object "GScanner")
  (c-name "g_scanner_peek_next_token")
  (return-type "GTokenType")
)

(define-method scope_add_symbol
  (of-object "GScanner")
  (c-name "g_scanner_scope_add_symbol")
  (return-type "none")
  (parameters
    '("guint" "scope_id")
    '("const-gchar*" "symbol")
    '("gpointer" "value")
  )
)

(define-method scope_foreach_symbol
  (of-object "GScanner")
  (c-name "g_scanner_scope_foreach_symbol")
  (return-type "none")
  (parameters
    '("guint" "scope_id")
    '("GHFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method scope_lookup_symbol
  (of-object "GScanner")
  (c-name "g_scanner_scope_lookup_symbol")
  (return-type "gpointer")
  (parameters
    '("guint" "scope_id")
    '("const-gchar*" "symbol")
  )
)

(define-method scope_remove_symbol
  (of-object "GScanner")
  (c-name "g_scanner_scope_remove_symbol")
  (return-type "none")
  (parameters
    '("guint" "scope_id")
    '("const-gchar*" "symbol")
  )
)

(define-method set_scope
  (of-object "GScanner")
  (c-name "g_scanner_set_scope")
  (return-type "guint")
  (parameters
    '("guint" "scope_id")
  )
)

(define-method sync_file_offset
  (of-object "GScanner")
  (c-name "g_scanner_sync_file_offset")
  (return-type "none")
)

(define-method unexp_token
  (of-object "GScanner")
  (c-name "g_scanner_unexp_token")
  (return-type "none")
  (parameters
    '("GTokenType" "expected_token")
    '("const-gchar*" "identifier_spec")
    '("const-gchar*" "symbol_spec")
    '("const-gchar*" "symbol_name")
    '("const-gchar*" "message")
    '("gint" "is_error")
  )
)

(define-method warn
  (of-object "GScanner")
  (c-name "g_scanner_warn")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-method append
  (of-object "GSequence")
  (c-name "g_sequence_append")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
  )
)

(define-method foreach
  (of-object "GSequence")
  (c-name "g_sequence_foreach")
  (return-type "none")
  (parameters
    '("GFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method free
  (of-object "GSequence")
  (c-name "g_sequence_free")
  (return-type "none")
)

(define-method get_begin_iter
  (of-object "GSequence")
  (c-name "g_sequence_get_begin_iter")
  (return-type "GSequenceIter*")
)

(define-method get_end_iter
  (of-object "GSequence")
  (c-name "g_sequence_get_end_iter")
  (return-type "GSequenceIter*")
)

(define-method get_iter_at_pos
  (of-object "GSequence")
  (c-name "g_sequence_get_iter_at_pos")
  (return-type "GSequenceIter*")
  (parameters
    '("gint" "pos")
  )
)

(define-method get_length
  (of-object "GSequence")
  (c-name "g_sequence_get_length")
  (return-type "gint")
)

(define-method insert_sorted
  (of-object "GSequence")
  (c-name "g_sequence_insert_sorted")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
    '("GCompareDataFunc" "cmp_func")
    '("gpointer" "cmp_data")
  )
)

(define-method insert_sorted_iter
  (of-object "GSequence")
  (c-name "g_sequence_insert_sorted_iter")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
    '("GSequenceIterCompareFunc" "iter_cmp")
    '("gpointer" "cmp_data")
  )
)

(define-method lookup
  (of-object "GSequence")
  (c-name "g_sequence_lookup")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
    '("GCompareDataFunc" "cmp_func")
    '("gpointer" "cmp_data")
  )
)

(define-method lookup_iter
  (of-object "GSequence")
  (c-name "g_sequence_lookup_iter")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
    '("GSequenceIterCompareFunc" "iter_cmp")
    '("gpointer" "cmp_data")
  )
)

(define-method prepend
  (of-object "GSequence")
  (c-name "g_sequence_prepend")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
  )
)

(define-method search
  (of-object "GSequence")
  (c-name "g_sequence_search")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
    '("GCompareDataFunc" "cmp_func")
    '("gpointer" "cmp_data")
  )
)

(define-method search_iter
  (of-object "GSequence")
  (c-name "g_sequence_search_iter")
  (return-type "GSequenceIter*")
  (parameters
    '("gpointer" "data")
    '("GSequenceIterCompareFunc" "iter_cmp")
    '("gpointer" "cmp_data")
  )
)

(define-method sort
  (of-object "GSequence")
  (c-name "g_sequence_sort")
  (return-type "none")
  (parameters
    '("GCompareDataFunc" "cmp_func")
    '("gpointer" "cmp_data")
  )
)

(define-method sort_iter
  (of-object "GSequence")
  (c-name "g_sequence_sort_iter")
  (return-type "none")
  (parameters
    '("GSequenceIterCompareFunc" "cmp_func")
    '("gpointer" "cmp_data")
  )
)

(define-method compare
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_compare")
  (return-type "gint")
  (parameters
    '("GSequenceIter*" "b")
  )
)

(define-method get_position
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_get_position")
  (return-type "gint")
)

(define-method get_sequence
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_get_sequence")
  (return-type "GSequence*")
)

(define-method is_begin
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_is_begin")
  (return-type "gboolean")
)

(define-method is_end
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_is_end")
  (return-type "gboolean")
)

(define-method move
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_move")
  (return-type "GSequenceIter*")
  (parameters
    '("gint" "delta")
  )
)

(define-method next
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_next")
  (return-type "GSequenceIter*")
)

(define-method prev
  (of-object "GSequenceIter")
  (c-name "g_sequence_iter_prev")
  (return-type "GSequenceIter*")
)

(define-function new
  (c-name "g_source_new")
  (return-type "GSource*")
  (parameters
    '("GSourceFuncs*" "source_funcs")
    '("guint" "struct_size")
  )
)

(define-method add_child_source
  (of-object "GSource")
  (c-name "g_source_add_child_source")
  (return-type "none")
  (parameters
    '("GSource*" "child_source")
  )
)

(define-method add_poll
  (of-object "GSource")
  (c-name "g_source_add_poll")
  (return-type "none")
  (parameters
    '("GPollFD*" "fd")
  )
)

(define-method add_unix_fd
  (of-object "GSource")
  (c-name "g_source_add_unix_fd")
  (return-type "gpointer")
  (parameters
    '("gint" "fd")
    '("GIOCondition" "events")
  )
)

(define-method attach
  (of-object "GSource")
  (c-name "g_source_attach")
  (return-type "guint")
  (parameters
    '("GMainContext*" "context")
  )
)

(define-method destroy
  (of-object "GSource")
  (c-name "g_source_destroy")
  (return-type "none")
)

(define-method get_can_recurse
  (of-object "GSource")
  (c-name "g_source_get_can_recurse")
  (return-type "gboolean")
)

(define-method get_context
  (of-object "GSource")
  (c-name "g_source_get_context")
  (return-type "GMainContext*")
)

(define-method get_current_time
  (of-object "GSource")
  (c-name "g_source_get_current_time")
  (return-type "none")
  (parameters
    '("GTimeVal*" "timeval")
  )
)

(define-method get_id
  (of-object "GSource")
  (c-name "g_source_get_id")
  (return-type "guint")
)

(define-method get_name
  (of-object "GSource")
  (c-name "g_source_get_name")
  (return-type "const-char*")
)

(define-method get_priority
  (of-object "GSource")
  (c-name "g_source_get_priority")
  (return-type "gint")
)

(define-method get_ready_time
  (of-object "GSource")
  (c-name "g_source_get_ready_time")
  (return-type "gint64")
)

(define-method get_time
  (of-object "GSource")
  (c-name "g_source_get_time")
  (return-type "gint64")
)

(define-method is_destroyed
  (of-object "GSource")
  (c-name "g_source_is_destroyed")
  (return-type "gboolean")
)

(define-method modify_unix_fd
  (of-object "GSource")
  (c-name "g_source_modify_unix_fd")
  (return-type "none")
  (parameters
    '("gpointer" "tag")
    '("GIOCondition" "new_events")
  )
)

(define-method query_unix_fd
  (of-object "GSource")
  (c-name "g_source_query_unix_fd")
  (return-type "GIOCondition")
  (parameters
    '("gpointer" "tag")
  )
)

(define-method ref
  (of-object "GSource")
  (c-name "g_source_ref")
  (return-type "GSource*")
)

(define-method remove_child_source
  (of-object "GSource")
  (c-name "g_source_remove_child_source")
  (return-type "none")
  (parameters
    '("GSource*" "child_source")
  )
)

(define-method remove_poll
  (of-object "GSource")
  (c-name "g_source_remove_poll")
  (return-type "none")
  (parameters
    '("GPollFD*" "fd")
  )
)

(define-method remove_unix_fd
  (of-object "GSource")
  (c-name "g_source_remove_unix_fd")
  (return-type "none")
  (parameters
    '("gpointer" "tag")
  )
)

(define-method set_callback
  (of-object "GSource")
  (c-name "g_source_set_callback")
  (return-type "none")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method set_callback_indirect
  (of-object "GSource")
  (c-name "g_source_set_callback_indirect")
  (return-type "none")
  (parameters
    '("gpointer" "callback_data")
    '("GSourceCallbackFuncs*" "callback_funcs")
  )
)

(define-method set_can_recurse
  (of-object "GSource")
  (c-name "g_source_set_can_recurse")
  (return-type "none")
  (parameters
    '("gboolean" "can_recurse")
  )
)

(define-method set_funcs
  (of-object "GSource")
  (c-name "g_source_set_funcs")
  (return-type "none")
  (parameters
    '("GSourceFuncs*" "funcs")
  )
)

(define-method set_name
  (of-object "GSource")
  (c-name "g_source_set_name")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method set_priority
  (of-object "GSource")
  (c-name "g_source_set_priority")
  (return-type "none")
  (parameters
    '("gint" "priority")
  )
)

(define-method set_ready_time
  (of-object "GSource")
  (c-name "g_source_set_ready_time")
  (return-type "none")
  (parameters
    '("gint64" "ready_time")
  )
)

(define-method unref
  (of-object "GSource")
  (c-name "g_source_unref")
  (return-type "none")
)

(define-method append
  (of-object "GString")
  (c-name "g_string_append")
  (return-type "GString*")
  (parameters
    '("const-gchar*" "val")
  )
)

(define-method append_c
  (of-object "GString")
  (c-name "g_string_append_c")
  (return-type "GString*")
  (parameters
    '("gchar" "c")
  )
)

(define-method append_len
  (of-object "GString")
  (c-name "g_string_append_len")
  (return-type "GString*")
  (parameters
    '("const-gchar*" "val")
    '("gssize" "len")
  )
)

(define-method append_printf
  (of-object "GString")
  (c-name "g_string_append_printf")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-method append_unichar
  (of-object "GString")
  (c-name "g_string_append_unichar")
  (return-type "GString*")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method append_uri_escaped
  (of-object "GString")
  (c-name "g_string_append_uri_escaped")
  (return-type "GString*")
  (parameters
    '("const-gchar*" "unescaped")
    '("const-gchar*" "reserved_chars_allowed")
    '("gboolean" "allow_utf8")
  )
)

(define-method append_vprintf
  (of-object "GString")
  (c-name "g_string_append_vprintf")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
    '("va_list" "args")
  )
)

(define-method ascii_down
  (of-object "GString")
  (c-name "g_string_ascii_down")
  (return-type "GString*")
)

(define-method ascii_up
  (of-object "GString")
  (c-name "g_string_ascii_up")
  (return-type "GString*")
)

(define-method assign
  (of-object "GString")
  (c-name "g_string_assign")
  (return-type "GString*")
  (parameters
    '("const-gchar*" "rval")
  )
)

(define-method down
  (of-object "GString")
  (c-name "g_string_down")
  (return-type "GString*")
)

(define-method equal
  (of-object "GString")
  (c-name "g_string_equal")
  (return-type "gboolean")
  (parameters
    '("const-GString*" "v2")
  )
)

(define-method erase
  (of-object "GString")
  (c-name "g_string_erase")
  (return-type "GString*")
  (parameters
    '("gssize" "pos")
    '("gssize" "len")
  )
)

(define-method free
  (of-object "GString")
  (c-name "g_string_free")
  (return-type "gchar*")
  (parameters
    '("gboolean" "free_segment")
  )
)

(define-method free_to_bytes
  (of-object "GString")
  (c-name "g_string_free_to_bytes")
  (return-type "GBytes*")
)

(define-method hash
  (of-object "GString")
  (c-name "g_string_hash")
  (return-type "guint")
)

(define-method insert
  (of-object "GString")
  (c-name "g_string_insert")
  (return-type "GString*")
  (parameters
    '("gssize" "pos")
    '("const-gchar*" "val")
  )
)

(define-method insert_c
  (of-object "GString")
  (c-name "g_string_insert_c")
  (return-type "GString*")
  (parameters
    '("gssize" "pos")
    '("gchar" "c")
  )
)

(define-method insert_len
  (of-object "GString")
  (c-name "g_string_insert_len")
  (return-type "GString*")
  (parameters
    '("gssize" "pos")
    '("const-gchar*" "val")
    '("gssize" "len")
  )
)

(define-method insert_unichar
  (of-object "GString")
  (c-name "g_string_insert_unichar")
  (return-type "GString*")
  (parameters
    '("gssize" "pos")
    '("gunichar" "wc")
  )
)

(define-method overwrite
  (of-object "GString")
  (c-name "g_string_overwrite")
  (return-type "GString*")
  (parameters
    '("gsize" "pos")
    '("const-gchar*" "val")
  )
)

(define-method overwrite_len
  (of-object "GString")
  (c-name "g_string_overwrite_len")
  (return-type "GString*")
  (parameters
    '("gsize" "pos")
    '("const-gchar*" "val")
    '("gssize" "len")
  )
)

(define-method prepend
  (of-object "GString")
  (c-name "g_string_prepend")
  (return-type "GString*")
  (parameters
    '("const-gchar*" "val")
  )
)

(define-method prepend_c
  (of-object "GString")
  (c-name "g_string_prepend_c")
  (return-type "GString*")
  (parameters
    '("gchar" "c")
  )
)

(define-method prepend_len
  (of-object "GString")
  (c-name "g_string_prepend_len")
  (return-type "GString*")
  (parameters
    '("const-gchar*" "val")
    '("gssize" "len")
  )
)

(define-method prepend_unichar
  (of-object "GString")
  (c-name "g_string_prepend_unichar")
  (return-type "GString*")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method printf
  (of-object "GString")
  (c-name "g_string_printf")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-method set_size
  (of-object "GString")
  (c-name "g_string_set_size")
  (return-type "GString*")
  (parameters
    '("gsize" "len")
  )
)

(define-method truncate
  (of-object "GString")
  (c-name "g_string_truncate")
  (return-type "GString*")
  (parameters
    '("gsize" "len")
  )
)

(define-method up
  (of-object "GString")
  (c-name "g_string_up")
  (return-type "GString*")
)

(define-method vprintf
  (of-object "GString")
  (c-name "g_string_vprintf")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
    '("va_list" "args")
  )
)

(define-method clear
  (of-object "GStringChunk")
  (c-name "g_string_chunk_clear")
  (return-type "none")
)

(define-method free
  (of-object "GStringChunk")
  (c-name "g_string_chunk_free")
  (return-type "none")
)

(define-method insert
  (of-object "GStringChunk")
  (c-name "g_string_chunk_insert")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method insert_const
  (of-object "GStringChunk")
  (c-name "g_string_chunk_insert_const")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method insert_len
  (of-object "GStringChunk")
  (c-name "g_string_chunk_insert_len")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string")
    '("gssize" "len")
  )
)

(define-method free
  (of-object "GTestLogBuffer")
  (c-name "g_test_log_buffer_free")
  (return-type "none")
)

(define-method pop
  (of-object "GTestLogBuffer")
  (c-name "g_test_log_buffer_pop")
  (return-type "GTestLogMsg*")
)


(define-method free
  (of-object "GTestLogMsg")
  (c-name "g_test_log_msg_free")
  (return-type "none")
)

(define-method add
  (of-object "GTestSuite")
  (c-name "g_test_suite_add")
  (return-type "none")
  (parameters
    '("GTestCase*" "test_case")
  )
)

(define-method add_suite
  (of-object "GTestSuite")
  (c-name "g_test_suite_add_suite")
  (return-type "none")
  (parameters
    '("GTestSuite*" "nestedsuite")
  )
)

(define-function new
  (c-name "g_thread_new")
  (return-type "GThread*")
  (parameters
    '("const-gchar*" "name")
    '("GThreadFunc" "func")
    '("gpointer" "data")
  )
)

(define-function try_new
  (c-name "g_thread_try_new")
  (return-type "GThread*")
  (parameters
    '("const-gchar*" "name")
    '("GThreadFunc" "func")
    '("gpointer" "data")
    '("GError**" "error")
  )
)

(define-method join
  (of-object "GThread")
  (c-name "g_thread_join")
  (return-type "gpointer")
)

(define-method ref
  (of-object "GThread")
  (c-name "g_thread_ref")
  (return-type "GThread*")
)

(define-method unref
  (of-object "GThread")
  (c-name "g_thread_unref")
  (return-type "none")
)

(define-method free
  (of-object "GThreadPool")
  (c-name "g_thread_pool_free")
  (return-type "none")
  (parameters
    '("gboolean" "immediate")
    '("gboolean" "wait_")
  )
)

(define-method get_max_threads
  (of-object "GThreadPool")
  (c-name "g_thread_pool_get_max_threads")
  (return-type "gint")
)

(define-method get_num_threads
  (of-object "GThreadPool")
  (c-name "g_thread_pool_get_num_threads")
  (return-type "guint")
)

(define-method push
  (of-object "GThreadPool")
  (c-name "g_thread_pool_push")
  (return-type "gboolean")
  (parameters
    '("gpointer" "data")
    '("GError**" "error")
  )
)

(define-method set_max_threads
  (of-object "GThreadPool")
  (c-name "g_thread_pool_set_max_threads")
  (return-type "gboolean")
  (parameters
    '("gint" "max_threads")
    '("GError**" "error")
  )
)

(define-method set_sort_function
  (of-object "GThreadPool")
  (c-name "g_thread_pool_set_sort_function")
  (return-type "none")
  (parameters
    '("GCompareDataFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method unprocessed
  (of-object "GThreadPool")
  (c-name "g_thread_pool_unprocessed")
  (return-type "guint")
)

(define-method add
  (of-object "GTimeVal")
  (c-name "g_time_val_add")
  (return-type "none")
  (parameters
    '("glong" "microseconds")
  )
)

(define-method to_iso8601
  (of-object "GTimeVal")
  (c-name "g_time_val_to_iso8601")
  (return-type "gchar*")
)

(define-function new
  (c-name "g_time_zone_new")
  (return-type "GTimeZone*")
  (parameters
    '("const-gchar*" "identifier")
  )
)

(define-function new_local
  (c-name "g_time_zone_new_local")
  (return-type "GTimeZone*")
)

(define-function new_utc
  (c-name "g_time_zone_new_utc")
  (return-type "GTimeZone*")
)

(define-method adjust_time
  (of-object "GTimeZone")
  (c-name "g_time_zone_adjust_time")
  (return-type "gint")
  (parameters
    '("GTimeType" "type")
    '("gint64*" "time_")
  )
)

(define-method find_interval
  (of-object "GTimeZone")
  (c-name "g_time_zone_find_interval")
  (return-type "gint")
  (parameters
    '("GTimeType" "type")
    '("gint64" "time_")
  )
)

(define-method get_abbreviation
  (of-object "GTimeZone")
  (c-name "g_time_zone_get_abbreviation")
  (return-type "const-gchar*")
  (parameters
    '("gint" "interval")
  )
)

(define-method get_offset
  (of-object "GTimeZone")
  (c-name "g_time_zone_get_offset")
  (return-type "gint32")
  (parameters
    '("gint" "interval")
  )
)

(define-method is_dst
  (of-object "GTimeZone")
  (c-name "g_time_zone_is_dst")
  (return-type "gboolean")
  (parameters
    '("gint" "interval")
  )
)

(define-method ref
  (of-object "GTimeZone")
  (c-name "g_time_zone_ref")
  (return-type "GTimeZone*")
)

(define-method unref
  (of-object "GTimeZone")
  (c-name "g_time_zone_unref")
  (return-type "none")
)

(define-method continue
  (of-object "GTimer")
  (c-name "g_timer_continue")
  (return-type "none")
)

(define-method destroy
  (of-object "GTimer")
  (c-name "g_timer_destroy")
  (return-type "none")
)

(define-method elapsed
  (of-object "GTimer")
  (c-name "g_timer_elapsed")
  (return-type "gdouble")
  (parameters
    '("gulong*" "microseconds")
  )
)

(define-method reset
  (of-object "GTimer")
  (c-name "g_timer_reset")
  (return-type "none")
)

(define-method start
  (of-object "GTimer")
  (c-name "g_timer_start")
  (return-type "none")
)

(define-method stop
  (of-object "GTimer")
  (c-name "g_timer_stop")
  (return-type "none")
)

(define-method destroy
  (of-object "GTree")
  (c-name "g_tree_destroy")
  (return-type "none")
)

(define-method foreach
  (of-object "GTree")
  (c-name "g_tree_foreach")
  (return-type "none")
  (parameters
    '("GTraverseFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method height
  (of-object "GTree")
  (c-name "g_tree_height")
  (return-type "gint")
)

(define-method insert
  (of-object "GTree")
  (c-name "g_tree_insert")
  (return-type "none")
  (parameters
    '("gpointer" "key")
    '("gpointer" "value")
  )
)

(define-method lookup
  (of-object "GTree")
  (c-name "g_tree_lookup")
  (return-type "gpointer")
  (parameters
    '("gconstpointer" "key")
  )
)

(define-method lookup_extended
  (of-object "GTree")
  (c-name "g_tree_lookup_extended")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "lookup_key")
    '("gpointer*" "orig_key")
    '("gpointer*" "value")
  )
)

(define-method nnodes
  (of-object "GTree")
  (c-name "g_tree_nnodes")
  (return-type "gint")
)

(define-method ref
  (of-object "GTree")
  (c-name "g_tree_ref")
  (return-type "GTree*")
)

(define-method remove
  (of-object "GTree")
  (c-name "g_tree_remove")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "key")
  )
)

(define-method replace
  (of-object "GTree")
  (c-name "g_tree_replace")
  (return-type "none")
  (parameters
    '("gpointer" "key")
    '("gpointer" "value")
  )
)

(define-method search
  (of-object "GTree")
  (c-name "g_tree_search")
  (return-type "gpointer")
  (parameters
    '("GCompareFunc" "search_func")
    '("gconstpointer" "user_data")
  )
)

(define-method steal
  (of-object "GTree")
  (c-name "g_tree_steal")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "key")
  )
)

(define-method traverse
  (of-object "GTree")
  (c-name "g_tree_traverse")
  (return-type "none")
  (parameters
    '("GTraverseFunc" "traverse_func")
    '("GTraverseType" "traverse_type")
    '("gpointer" "user_data")
  )
)

(define-method unref
  (of-object "GTree")
  (c-name "g_tree_unref")
  (return-type "none")
)

(define-function new
  (c-name "g_variant_new")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "format_string")
  )
)

(define-function new_array
  (c-name "g_variant_new_array")
  (return-type "GVariant*")
  (parameters
    '("const-GVariantType*" "child_type")
    '("const-GVariant**" "children")
    '("gsize" "n_children")
  )
)

(define-function new_boolean
  (c-name "g_variant_new_boolean")
  (return-type "GVariant*")
  (parameters
    '("gboolean" "value")
  )
)

(define-function new_byte
  (c-name "g_variant_new_byte")
  (return-type "GVariant*")
  (parameters
    '("guchar" "value")
  )
)

(define-function new_bytestring
  (c-name "g_variant_new_bytestring")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function new_bytestring_array
  (c-name "g_variant_new_bytestring_array")
  (return-type "GVariant*")
  (parameters
    '("const-gchar**" "strv")
    '("gssize" "length")
  )
)

(define-function new_dict_entry
  (c-name "g_variant_new_dict_entry")
  (return-type "GVariant*")
  (parameters
    '("GVariant*" "key")
    '("GVariant*" "value")
  )
)

(define-function new_double
  (c-name "g_variant_new_double")
  (return-type "GVariant*")
  (parameters
    '("gdouble" "value")
  )
)

(define-function new_fixed_array
  (c-name "g_variant_new_fixed_array")
  (return-type "GVariant*")
  (parameters
    '("const-GVariantType*" "element_type")
    '("gconstpointer" "elements")
    '("gsize" "n_elements")
    '("gsize" "element_size")
  )
)

(define-function new_from_data
  (c-name "g_variant_new_from_data")
  (return-type "GVariant*")
  (parameters
    '("const-GVariantType*" "type")
    '("gconstpointer" "data")
    '("gsize" "size")
    '("gboolean" "trusted")
    '("GDestroyNotify" "notify")
    '("gpointer" "user_data")
  )
)

(define-function new_handle
  (c-name "g_variant_new_handle")
  (return-type "GVariant*")
  (parameters
    '("gint32" "value")
  )
)

(define-function new_int16
  (c-name "g_variant_new_int16")
  (return-type "GVariant*")
  (parameters
    '("gint16" "value")
  )
)

(define-function new_int32
  (c-name "g_variant_new_int32")
  (return-type "GVariant*")
  (parameters
    '("gint32" "value")
  )
)

(define-function new_int64
  (c-name "g_variant_new_int64")
  (return-type "GVariant*")
  (parameters
    '("gint64" "value")
  )
)

(define-function new_maybe
  (c-name "g_variant_new_maybe")
  (return-type "GVariant*")
  (parameters
    '("const-GVariantType*" "child_type")
    '("GVariant*" "child")
  )
)

(define-function new_object_path
  (c-name "g_variant_new_object_path")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "object_path")
  )
)

(define-function new_objv
  (c-name "g_variant_new_objv")
  (return-type "GVariant*")
  (parameters
    '("const-gchar**" "strv")
    '("gssize" "length")
  )
)

(define-function new_parsed
  (c-name "g_variant_new_parsed")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-function new_parsed_va
  (c-name "g_variant_new_parsed_va")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "format")
    '("va_list*" "app")
  )
)

(define-function new_printf
  (c-name "g_variant_new_printf")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "format_string")
  )
)

(define-function new_signature
  (c-name "g_variant_new_signature")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "signature")
  )
)

(define-function new_string
  (c-name "g_variant_new_string")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function new_strv
  (c-name "g_variant_new_strv")
  (return-type "GVariant*")
  (parameters
    '("const-gchar**" "strv")
    '("gssize" "length")
  )
)

(define-function new_take_string
  (c-name "g_variant_new_take_string")
  (return-type "GVariant*")
  (parameters
    '("gchar*" "string")
  )
)

(define-function new_tuple
  (c-name "g_variant_new_tuple")
  (return-type "GVariant*")
  (parameters
    '("const-GVariant**" "children")
    '("gsize" "n_children")
  )
)

(define-function new_uint16
  (c-name "g_variant_new_uint16")
  (return-type "GVariant*")
  (parameters
    '("guint16" "value")
  )
)

(define-function new_uint32
  (c-name "g_variant_new_uint32")
  (return-type "GVariant*")
  (parameters
    '("guint32" "value")
  )
)

(define-function new_uint64
  (c-name "g_variant_new_uint64")
  (return-type "GVariant*")
  (parameters
    '("guint64" "value")
  )
)

(define-function new_va
  (c-name "g_variant_new_va")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "format_string")
    '("const-gchar**" "endptr")
    '("va_list*" "app")
  )
)

(define-function new_variant
  (c-name "g_variant_new_variant")
  (return-type "GVariant*")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method byteswap
  (of-object "GVariant")
  (c-name "g_variant_byteswap")
  (return-type "GVariant*")
)

(define-method check_format_string
  (of-object "GVariant")
  (c-name "g_variant_check_format_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "format_string")
    '("gboolean" "copy_only")
  )
)

(define-method classify
  (of-object "GVariant")
  (c-name "g_variant_classify")
  (return-type "GVariantClass")
)

(define-method compare
  (of-object "GVariant")
  (c-name "g_variant_compare")
  (return-type "gint")
  (parameters
    '("gconstpointer" "two")
  )
)

(define-method dup_bytestring
  (of-object "GVariant")
  (c-name "g_variant_dup_bytestring")
  (return-type "const-gchar*")
  (parameters
    '("gsize*" "length")
  )
)

(define-method dup_bytestring_array
  (of-object "GVariant")
  (c-name "g_variant_dup_bytestring_array")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method dup_objv
  (of-object "GVariant")
  (c-name "g_variant_dup_objv")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method dup_string
  (of-object "GVariant")
  (c-name "g_variant_dup_string")
  (return-type "gchar*")
  (parameters
    '("gsize*" "length")
  )
)

(define-method dup_strv
  (of-object "GVariant")
  (c-name "g_variant_dup_strv")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method equal
  (of-object "GVariant")
  (c-name "g_variant_equal")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "two")
  )
)

(define-method get
  (of-object "GVariant")
  (c-name "g_variant_get")
  (return-type "none")
  (parameters
    '("const-gchar*" "format_string")
  )
)

(define-method get_boolean
  (of-object "GVariant")
  (c-name "g_variant_get_boolean")
  (return-type "gboolean")
)

(define-method get_byte
  (of-object "GVariant")
  (c-name "g_variant_get_byte")
  (return-type "guchar")
)

(define-method get_bytestring
  (of-object "GVariant")
  (c-name "g_variant_get_bytestring")
  (return-type "const-gchar*")
)

(define-method get_bytestring_array
  (of-object "GVariant")
  (c-name "g_variant_get_bytestring_array")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method get_child
  (of-object "GVariant")
  (c-name "g_variant_get_child")
  (return-type "none")
  (parameters
    '("gsize" "index_")
    '("const-gchar*" "format_string")
  )
)

(define-method get_child_value
  (of-object "GVariant")
  (c-name "g_variant_get_child_value")
  (return-type "GVariant*")
  (parameters
    '("gsize" "index_")
  )
)

(define-method get_data
  (of-object "GVariant")
  (c-name "g_variant_get_data")
  (return-type "gconstpointer")
)

(define-method get_data_as_bytes
  (of-object "GVariant")
  (c-name "g_variant_get_data_as_bytes")
  (return-type "GBytes*")
)

(define-method get_double
  (of-object "GVariant")
  (c-name "g_variant_get_double")
  (return-type "gdouble")
)

(define-method get_fixed_array
  (of-object "GVariant")
  (c-name "g_variant_get_fixed_array")
  (return-type "gconstpointer")
  (parameters
    '("gsize*" "n_elements")
    '("gsize" "element_size")
  )
)

(define-method get_handle
  (of-object "GVariant")
  (c-name "g_variant_get_handle")
  (return-type "gint32")
)

(define-method get_int16
  (of-object "GVariant")
  (c-name "g_variant_get_int16")
  (return-type "gint16")
)

(define-method get_int32
  (of-object "GVariant")
  (c-name "g_variant_get_int32")
  (return-type "gint32")
)

(define-method get_int64
  (of-object "GVariant")
  (c-name "g_variant_get_int64")
  (return-type "gint64")
)

(define-method get_maybe
  (of-object "GVariant")
  (c-name "g_variant_get_maybe")
  (return-type "GVariant*")
)

(define-method get_normal_form
  (of-object "GVariant")
  (c-name "g_variant_get_normal_form")
  (return-type "GVariant*")
)

(define-method get_objv
  (of-object "GVariant")
  (c-name "g_variant_get_objv")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method get_size
  (of-object "GVariant")
  (c-name "g_variant_get_size")
  (return-type "gsize")
)

(define-method get_string
  (of-object "GVariant")
  (c-name "g_variant_get_string")
  (return-type "const-gchar*")
  (parameters
    '("gsize*" "length")
  )
)

(define-method get_strv
  (of-object "GVariant")
  (c-name "g_variant_get_strv")
  (return-type "const-gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method get_type
  (of-object "GVariant")
  (c-name "g_variant_get_type")
  (return-type "const-GVariantType*")
)

(define-method get_type_string
  (of-object "GVariant")
  (c-name "g_variant_get_type_string")
  (return-type "const-gchar*")
)

(define-method get_uint16
  (of-object "GVariant")
  (c-name "g_variant_get_uint16")
  (return-type "guint16")
)

(define-method get_uint32
  (of-object "GVariant")
  (c-name "g_variant_get_uint32")
  (return-type "guint32")
)

(define-method get_uint64
  (of-object "GVariant")
  (c-name "g_variant_get_uint64")
  (return-type "guint64")
)

(define-method get_va
  (of-object "GVariant")
  (c-name "g_variant_get_va")
  (return-type "none")
  (parameters
    '("const-gchar*" "format_string")
    '("const-gchar**" "endptr")
    '("va_list*" "app")
  )
)

(define-method get_variant
  (of-object "GVariant")
  (c-name "g_variant_get_variant")
  (return-type "GVariant*")
)

(define-method hash
  (of-object "GVariant")
  (c-name "g_variant_hash")
  (return-type "guint")
)

(define-method is_container
  (of-object "GVariant")
  (c-name "g_variant_is_container")
  (return-type "gboolean")
)

(define-method is_floating
  (of-object "GVariant")
  (c-name "g_variant_is_floating")
  (return-type "gboolean")
)

(define-method is_normal_form
  (of-object "GVariant")
  (c-name "g_variant_is_normal_form")
  (return-type "gboolean")
)

(define-method is_of_type
  (of-object "GVariant")
  (c-name "g_variant_is_of_type")
  (return-type "gboolean")
  (parameters
    '("const-GVariantType*" "type")
  )
)

(define-method iter_new
  (of-object "GVariant")
  (c-name "g_variant_iter_new")
  (return-type "GVariantIter*")
)

(define-method lookup
  (of-object "GVariant")
  (c-name "g_variant_lookup")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "format_string")
  )
)

(define-method lookup_value
  (of-object "GVariant")
  (c-name "g_variant_lookup_value")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
    '("const-GVariantType*" "expected_type")
  )
)

(define-method n_children
  (of-object "GVariant")
  (c-name "g_variant_n_children")
  (return-type "gsize")
)

(define-method print
  (of-object "GVariant")
  (c-name "g_variant_print")
  (return-type "gchar*")
  (parameters
    '("gboolean" "type_annotate")
  )
)

(define-method print_string
  (of-object "GVariant")
  (c-name "g_variant_print_string")
  (return-type "GString*")
  (parameters
    '("GString*" "string")
    '("gboolean" "type_annotate")
  )
)

(define-method ref
  (of-object "GVariant")
  (c-name "g_variant_ref")
  (return-type "GVariant*")
)

(define-method ref_sink
  (of-object "GVariant")
  (c-name "g_variant_ref_sink")
  (return-type "GVariant*")
)

(define-method store
  (of-object "GVariant")
  (c-name "g_variant_store")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method take_ref
  (of-object "GVariant")
  (c-name "g_variant_take_ref")
  (return-type "GVariant*")
)

(define-method unref
  (of-object "GVariant")
  (c-name "g_variant_unref")
  (return-type "none")
)

(define-function new
  (c-name "g_variant_builder_new")
  (return-type "GVariantBuilder*")
  (parameters
    '("const-GVariantType*" "type")
  )
)

(define-method add
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_add")
  (return-type "none")
  (parameters
    '("const-gchar*" "format_string")
  )
)

(define-method add_parsed
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_add_parsed")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-method add_value
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_add_value")
  (return-type "none")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method clear
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_clear")
  (return-type "none")
)

(define-method close
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_close")
  (return-type "none")
)

(define-method end
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_end")
  (return-type "GVariant*")
)

(define-method init
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_init")
  (return-type "none")
  (parameters
    '("const-GVariantType*" "type")
  )
)

(define-method open
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_open")
  (return-type "none")
  (parameters
    '("const-GVariantType*" "type")
  )
)

(define-method ref
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_ref")
  (return-type "GVariantBuilder*")
)

(define-method unref
  (of-object "GVariantBuilder")
  (c-name "g_variant_builder_unref")
  (return-type "none")
)

(define-function new
  (c-name "g_variant_dict_new")
  (return-type "GVariantDict*")
  (parameters
    '("GVariant*" "from_asv")
  )
)

(define-method clear
  (of-object "GVariantDict")
  (c-name "g_variant_dict_clear")
  (return-type "none")
)

(define-method contains
  (of-object "GVariantDict")
  (c-name "g_variant_dict_contains")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method end
  (of-object "GVariantDict")
  (c-name "g_variant_dict_end")
  (return-type "GVariant*")
)

(define-method init
  (of-object "GVariantDict")
  (c-name "g_variant_dict_init")
  (return-type "none")
  (parameters
    '("GVariant*" "from_asv")
  )
)

(define-method insert
  (of-object "GVariantDict")
  (c-name "g_variant_dict_insert")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "format_string")
  )
)

(define-method insert_value
  (of-object "GVariantDict")
  (c-name "g_variant_dict_insert_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("GVariant*" "value")
  )
)

(define-method lookup
  (of-object "GVariantDict")
  (c-name "g_variant_dict_lookup")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "format_string")
  )
)

(define-method lookup_value
  (of-object "GVariantDict")
  (c-name "g_variant_dict_lookup_value")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
    '("const-GVariantType*" "expected_type")
  )
)

(define-method ref
  (of-object "GVariantDict")
  (c-name "g_variant_dict_ref")
  (return-type "GVariantDict*")
)

(define-method remove
  (of-object "GVariantDict")
  (c-name "g_variant_dict_remove")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method unref
  (of-object "GVariantDict")
  (c-name "g_variant_dict_unref")
  (return-type "none")
)

(define-method copy
  (of-object "GVariantIter")
  (c-name "g_variant_iter_copy")
  (return-type "GVariantIter*")
)

(define-method free
  (of-object "GVariantIter")
  (c-name "g_variant_iter_free")
  (return-type "none")
)

(define-method init
  (of-object "GVariantIter")
  (c-name "g_variant_iter_init")
  (return-type "gsize")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method loop
  (of-object "GVariantIter")
  (c-name "g_variant_iter_loop")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "format_string")
  )
)

(define-method n_children
  (of-object "GVariantIter")
  (c-name "g_variant_iter_n_children")
  (return-type "gsize")
)

(define-method next
  (of-object "GVariantIter")
  (c-name "g_variant_iter_next")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "format_string")
  )
)

(define-method next_value
  (of-object "GVariantIter")
  (c-name "g_variant_iter_next_value")
  (return-type "GVariant*")
)

(define-function new
  (c-name "g_variant_type_new")
  (return-type "GVariantType*")
  (parameters
    '("const-gchar*" "type_string")
  )
)

(define-function new_array
  (c-name "g_variant_type_new_array")
  (return-type "GVariantType*")
  (parameters
    '("const-GVariantType*" "element")
  )
)

(define-function new_dict_entry
  (c-name "g_variant_type_new_dict_entry")
  (return-type "GVariantType*")
  (parameters
    '("const-GVariantType*" "key")
    '("const-GVariantType*" "value")
  )
)

(define-function new_maybe
  (c-name "g_variant_type_new_maybe")
  (return-type "GVariantType*")
  (parameters
    '("const-GVariantType*" "element")
  )
)

(define-function new_tuple
  (c-name "g_variant_type_new_tuple")
  (return-type "GVariantType*")
  (parameters
    '("const-GVariantType**" "items")
    '("gint" "length")
  )
)

(define-method copy
  (of-object "GVariantType")
  (c-name "g_variant_type_copy")
  (return-type "GVariantType*")
)

(define-method dup_string
  (of-object "GVariantType")
  (c-name "g_variant_type_dup_string")
  (return-type "gchar*")
)

(define-method element
  (of-object "GVariantType")
  (c-name "g_variant_type_element")
  (return-type "const-GVariantType*")
)

(define-method equal
  (of-object "GVariantType")
  (c-name "g_variant_type_equal")
  (return-type "gboolean")
  (parameters
    '("gconstpointer" "type2")
  )
)

(define-method first
  (of-object "GVariantType")
  (c-name "g_variant_type_first")
  (return-type "const-GVariantType*")
)

(define-method free
  (of-object "GVariantType")
  (c-name "g_variant_type_free")
  (return-type "none")
)

(define-method get_string_length
  (of-object "GVariantType")
  (c-name "g_variant_type_get_string_length")
  (return-type "gsize")
)

(define-method hash
  (of-object "GVariantType")
  (c-name "g_variant_type_hash")
  (return-type "guint")
)

(define-method is_array
  (of-object "GVariantType")
  (c-name "g_variant_type_is_array")
  (return-type "gboolean")
)

(define-method is_basic
  (of-object "GVariantType")
  (c-name "g_variant_type_is_basic")
  (return-type "gboolean")
)

(define-method is_container
  (of-object "GVariantType")
  (c-name "g_variant_type_is_container")
  (return-type "gboolean")
)

(define-method is_definite
  (of-object "GVariantType")
  (c-name "g_variant_type_is_definite")
  (return-type "gboolean")
)

(define-method is_dict_entry
  (of-object "GVariantType")
  (c-name "g_variant_type_is_dict_entry")
  (return-type "gboolean")
)

(define-method is_maybe
  (of-object "GVariantType")
  (c-name "g_variant_type_is_maybe")
  (return-type "gboolean")
)

(define-method is_subtype_of
  (of-object "GVariantType")
  (c-name "g_variant_type_is_subtype_of")
  (return-type "gboolean")
  (parameters
    '("const-GVariantType*" "supertype")
  )
)

(define-method is_tuple
  (of-object "GVariantType")
  (c-name "g_variant_type_is_tuple")
  (return-type "gboolean")
)

(define-method is_variant
  (of-object "GVariantType")
  (c-name "g_variant_type_is_variant")
  (return-type "gboolean")
)

(define-method key
  (of-object "GVariantType")
  (c-name "g_variant_type_key")
  (return-type "const-GVariantType*")
)

(define-method n_items
  (of-object "GVariantType")
  (c-name "g_variant_type_n_items")
  (return-type "gsize")
)

(define-method next
  (of-object "GVariantType")
  (c-name "g_variant_type_next")
  (return-type "const-GVariantType*")
)

(define-method peek_string
  (of-object "GVariantType")
  (c-name "g_variant_type_peek_string")
  (return-type "const-gchar*")
)

(define-method value
  (of-object "GVariantType")
  (c-name "g_variant_type_value")
  (return-type "const-GVariantType*")
)

