/* $Id$ */

/* Copyright (C) 2004 The glibmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

_DEFS(glibmm,glib)

#include <glibmm/optionentry.h>
#include <glibmm/optiongroup.h>
#include <glibmm/error.h>

#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C" { typedef struct _GOptionContext GOptionContext; }
#endif


namespace Glib
{

/** Exception class for options.
 */
_WRAP_GERROR(OptionError, GOptionError, G_OPTION_ERROR, NO_GTYPE)

/** TODO
 */
class OptionContext
{
  _CLASS_GENERIC(OptionContext, GOptionContext)
public:
  explicit OptionContext(const Glib::ustring& parameter_string);
  explicit OptionContext(GOptionContext* castitem);
  virtual ~OptionContext();
  
  _WRAP_METHOD(void set_help_enabled(bool help_enabled = true), g_option_context_set_help_enabled)
  _WRAP_METHOD(bool get_help_enabled() const, g_option_context_get_help_enabled)
  _WRAP_METHOD(void set_ignore_unknown_options(bool ignore_unknown = true), g_option_context_set_ignore_unknown_options)
  _WRAP_METHOD(bool get_ignore_unknown_options() const, g_option_context_get_ignore_unknown_options)

//TODO:  _WRAP_METHOD(void add_main_entries(const GOptionEntry* entries, const Glib::ustring& translation_domain), g_option_context_add_main_entries)

#m4 _CONVERSION(`char**&',`gchar***',`&($3)')
  _WRAP_METHOD(bool parse(int& argc, char**& argv), g_option_context_parse, errthrow)

  _WRAP_METHOD(void add_group(const OptionGroup& group), g_option_context_add_group)
  _WRAP_METHOD(void set_main_group(const OptionGroup& group), g_option_context_set_main_group)
  OptionGroup get_main_group() const;
  _IGNORE(g_option_context_get_main_group)


  GOptionContext*       gobj()       { return gobject_; }
  const GOptionContext* gobj() const { return gobject_; }

protected:



  GOptionContext* gobject_;
};


} // namespace Glib

