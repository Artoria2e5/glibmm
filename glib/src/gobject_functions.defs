(define-function new_object
  (c-name "g_closure_new_object")
  (return-type "GClosure*")
  (parameters
    '("guint" "sizeof_closure")
    '("GObject*" "object")
  )
)

(define-function new_simple
  (c-name "g_closure_new_simple")
  (return-type "GClosure*")
  (parameters
    '("guint" "sizeof_closure")
    '("gpointer" "data")
  )
)

(define-method add_finalize_notifier
  (of-object "GClosure")
  (c-name "g_closure_add_finalize_notifier")
  (return-type "none")
  (parameters
    '("gpointer" "notify_data")
    '("GClosureNotify" "notify_func")
  )
)

(define-method add_invalidate_notifier
  (of-object "GClosure")
  (c-name "g_closure_add_invalidate_notifier")
  (return-type "none")
  (parameters
    '("gpointer" "notify_data")
    '("GClosureNotify" "notify_func")
  )
)

(define-method add_marshal_guards
  (of-object "GClosure")
  (c-name "g_closure_add_marshal_guards")
  (return-type "none")
  (parameters
    '("gpointer" "pre_marshal_data")
    '("GClosureNotify" "pre_marshal_notify")
    '("gpointer" "post_marshal_data")
    '("GClosureNotify" "post_marshal_notify")
  )
)

(define-method invalidate
  (of-object "GClosure")
  (c-name "g_closure_invalidate")
  (return-type "none")
)

(define-method invoke
  (of-object "GClosure")
  (c-name "g_closure_invoke")
  (return-type "none")
  (parameters
    '("GValue*" "return_value")
    '("guint" "n_param_values")
    '("const-GValue*" "param_values")
    '("gpointer" "invocation_hint")
  )
)

(define-method ref
  (of-object "GClosure")
  (c-name "g_closure_ref")
  (return-type "GClosure*")
)

(define-method remove_finalize_notifier
  (of-object "GClosure")
  (c-name "g_closure_remove_finalize_notifier")
  (return-type "none")
  (parameters
    '("gpointer" "notify_data")
    '("GClosureNotify" "notify_func")
  )
)

(define-method remove_invalidate_notifier
  (of-object "GClosure")
  (c-name "g_closure_remove_invalidate_notifier")
  (return-type "none")
  (parameters
    '("gpointer" "notify_data")
    '("GClosureNotify" "notify_func")
  )
)

(define-method set_marshal
  (of-object "GClosure")
  (c-name "g_closure_set_marshal")
  (return-type "none")
  (parameters
    '("GClosureMarshal" "marshal")
  )
)

(define-method set_meta_marshal
  (of-object "GClosure")
  (c-name "g_closure_set_meta_marshal")
  (return-type "none")
  (parameters
    '("gpointer" "marshal_data")
    '("GClosureMarshal" "meta_marshal")
  )
)

(define-method sink
  (of-object "GClosure")
  (c-name "g_closure_sink")
  (return-type "none")
)

(define-method unref
  (of-object "GClosure")
  (c-name "g_closure_unref")
  (return-type "none")
)

(define-method find_property
  (of-object "GObjectClass")
  (c-name "g_object_class_find_property")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method install_properties
  (of-object "GObjectClass")
  (c-name "g_object_class_install_properties")
  (return-type "none")
  (parameters
    '("guint" "n_pspecs")
    '("const-GParamSpec**" "pspecs")
  )
)

(define-method install_property
  (of-object "GObjectClass")
  (c-name "g_object_class_install_property")
  (return-type "none")
  (parameters
    '("guint" "property_id")
    '("GParamSpec*" "pspec")
  )
)

(define-method list_properties
  (of-object "GObjectClass")
  (c-name "g_object_class_list_properties")
  (return-type "const-GParamSpec**")
  (parameters
    '("guint*" "n_properties")
  )
)

(define-method override_property
  (of-object "GObjectClass")
  (c-name "g_object_class_override_property")
  (return-type "none")
  (parameters
    '("guint" "property_id")
    '("const-gchar*" "name")
  )
)

(define-method insert
  (of-object "GParamSpecPool")
  (c-name "g_param_spec_pool_insert")
  (return-type "none")
  (parameters
    '("GParamSpec*" "pspec")
    '("GType" "owner_type")
  )
)

(define-method list
  (of-object "GParamSpecPool")
  (c-name "g_param_spec_pool_list")
  (return-type "const-GParamSpec**")
  (parameters
    '("GType" "owner_type")
    '("guint*" "n_pspecs_p")
  )
)

(define-method list_owned
  (of-object "GParamSpecPool")
  (c-name "g_param_spec_pool_list_owned")
  (return-type "GList*")
  (parameters
    '("GType" "owner_type")
  )
)

(define-method lookup
  (of-object "GParamSpecPool")
  (c-name "g_param_spec_pool_lookup")
  (return-type "GParamSpec*")
  (parameters
    '("const-gchar*" "param_name")
    '("GType" "owner_type")
    '("gboolean" "walk_ancestors")
  )
)

(define-method remove
  (of-object "GParamSpecPool")
  (c-name "g_param_spec_pool_remove")
  (return-type "none")
  (parameters
    '("GParamSpec*" "pspec")
  )
)

(define-method get_private
  (of-object "GTypeClass")
  (c-name "g_type_class_get_private")
  (return-type "gpointer")
  (parameters
    '("GType" "private_type")
  )
)

(define-method peek_parent
  (of-object "GTypeClass")
  (c-name "g_type_class_peek_parent")
  (return-type "gpointer")
)

(define-method unref
  (of-object "GTypeClass")
  (c-name "g_type_class_unref")
  (return-type "none")
)

(define-method unref_uncached
  (of-object "GTypeClass")
  (c-name "g_type_class_unref_uncached")
  (return-type "none")
)

(define-method get_private
  (of-object "GTypeInstance")
  (c-name "g_type_instance_get_private")
  (return-type "gpointer")
  (parameters
    '("GType" "private_type")
  )
)

(define-method peek_parent
  (of-object "GTypeInterface")
  (c-name "g_type_interface_peek_parent")
  (return-type "gpointer")
)

(define-method copy
  (of-object "GValue")
  (c-name "g_value_copy")
  (return-type "none")
  (parameters
    '("GValue*" "dest_value")
  )
)

(define-method dup_boxed
  (of-object "GValue")
  (c-name "g_value_dup_boxed")
  (return-type "gpointer")
)

(define-method dup_object
  (of-object "GValue")
  (c-name "g_value_dup_object")
  (return-type "gpointer")
)

(define-method dup_param
  (of-object "GValue")
  (c-name "g_value_dup_param")
  (return-type "GParamSpec*")
)

(define-method dup_string
  (of-object "GValue")
  (c-name "g_value_dup_string")
  (return-type "gchar*")
)

(define-method dup_variant
  (of-object "GValue")
  (c-name "g_value_dup_variant")
  (return-type "GVariant*")
)

(define-method fits_pointer
  (of-object "GValue")
  (c-name "g_value_fits_pointer")
  (return-type "gboolean")
)

(define-method get_boolean
  (of-object "GValue")
  (c-name "g_value_get_boolean")
  (return-type "gboolean")
)

(define-method get_boxed
  (of-object "GValue")
  (c-name "g_value_get_boxed")
  (return-type "gpointer")
)

(define-method get_char
  (of-object "GValue")
  (c-name "g_value_get_char")
  (return-type "gchar")
)

(define-method get_double
  (of-object "GValue")
  (c-name "g_value_get_double")
  (return-type "gdouble")
)

(define-method get_enum
  (of-object "GValue")
  (c-name "g_value_get_enum")
  (return-type "gint")
)

(define-method get_flags
  (of-object "GValue")
  (c-name "g_value_get_flags")
  (return-type "guint")
)

(define-method get_float
  (of-object "GValue")
  (c-name "g_value_get_float")
  (return-type "gfloat")
)

(define-method get_gtype
  (of-object "GValue")
  (c-name "g_value_get_gtype")
  (return-type "GType")
)

(define-method get_int
  (of-object "GValue")
  (c-name "g_value_get_int")
  (return-type "gint")
)

(define-method get_int64
  (of-object "GValue")
  (c-name "g_value_get_int64")
  (return-type "gint64")
)

(define-method get_long
  (of-object "GValue")
  (c-name "g_value_get_long")
  (return-type "glong")
)

(define-method get_object
  (of-object "GValue")
  (c-name "g_value_get_object")
  (return-type "gpointer")
)

(define-method get_param
  (of-object "GValue")
  (c-name "g_value_get_param")
  (return-type "GParamSpec*")
)

(define-method get_pointer
  (of-object "GValue")
  (c-name "g_value_get_pointer")
  (return-type "gpointer")
)

(define-method get_schar
  (of-object "GValue")
  (c-name "g_value_get_schar")
  (return-type "gint8")
)

(define-method get_string
  (of-object "GValue")
  (c-name "g_value_get_string")
  (return-type "const-gchar*")
)

(define-method get_uchar
  (of-object "GValue")
  (c-name "g_value_get_uchar")
  (return-type "guchar")
)

(define-method get_uint
  (of-object "GValue")
  (c-name "g_value_get_uint")
  (return-type "guint")
)

(define-method get_uint64
  (of-object "GValue")
  (c-name "g_value_get_uint64")
  (return-type "guint64")
)

(define-method get_ulong
  (of-object "GValue")
  (c-name "g_value_get_ulong")
  (return-type "gulong")
)

(define-method get_variant
  (of-object "GValue")
  (c-name "g_value_get_variant")
  (return-type "GVariant*")
)

(define-method init
  (of-object "GValue")
  (c-name "g_value_init")
  (return-type "GValue*")
  (parameters
    '("GType" "g_type")
  )
)

(define-method init_from_instance
  (of-object "GValue")
  (c-name "g_value_init_from_instance")
  (return-type "none")
  (parameters
    '("gpointer" "instance")
  )
)

(define-method peek_pointer
  (of-object "GValue")
  (c-name "g_value_peek_pointer")
  (return-type "gpointer")
)

(define-method reset
  (of-object "GValue")
  (c-name "g_value_reset")
  (return-type "GValue*")
)

(define-method set_boolean
  (of-object "GValue")
  (c-name "g_value_set_boolean")
  (return-type "none")
  (parameters
    '("gboolean" "v_boolean")
  )
)

(define-method set_boxed
  (of-object "GValue")
  (c-name "g_value_set_boxed")
  (return-type "none")
  (parameters
    '("gconstpointer" "v_boxed")
  )
)

(define-method set_boxed_take_ownership
  (of-object "GValue")
  (c-name "g_value_set_boxed_take_ownership")
  (return-type "none")
  (parameters
    '("gconstpointer" "v_boxed")
  )
)

(define-method set_char
  (of-object "GValue")
  (c-name "g_value_set_char")
  (return-type "none")
  (parameters
    '("gchar" "v_char")
  )
)

(define-method set_double
  (of-object "GValue")
  (c-name "g_value_set_double")
  (return-type "none")
  (parameters
    '("gdouble" "v_double")
  )
)

(define-method set_enum
  (of-object "GValue")
  (c-name "g_value_set_enum")
  (return-type "none")
  (parameters
    '("gint" "v_enum")
  )
)

(define-method set_flags
  (of-object "GValue")
  (c-name "g_value_set_flags")
  (return-type "none")
  (parameters
    '("guint" "v_flags")
  )
)

(define-method set_float
  (of-object "GValue")
  (c-name "g_value_set_float")
  (return-type "none")
  (parameters
    '("gfloat" "v_float")
  )
)

(define-method set_gtype
  (of-object "GValue")
  (c-name "g_value_set_gtype")
  (return-type "none")
  (parameters
    '("GType" "v_gtype")
  )
)

(define-method set_instance
  (of-object "GValue")
  (c-name "g_value_set_instance")
  (return-type "none")
  (parameters
    '("gpointer" "instance")
  )
)

(define-method set_int
  (of-object "GValue")
  (c-name "g_value_set_int")
  (return-type "none")
  (parameters
    '("gint" "v_int")
  )
)

(define-method set_int64
  (of-object "GValue")
  (c-name "g_value_set_int64")
  (return-type "none")
  (parameters
    '("gint64" "v_int64")
  )
)

(define-method set_long
  (of-object "GValue")
  (c-name "g_value_set_long")
  (return-type "none")
  (parameters
    '("glong" "v_long")
  )
)

(define-method set_object
  (of-object "GValue")
  (c-name "g_value_set_object")
  (return-type "none")
  (parameters
    '("gpointer" "v_object")
  )
)

(define-method set_object_take_ownership
  (of-object "GValue")
  (c-name "g_value_set_object_take_ownership")
  (return-type "none")
  (parameters
    '("gpointer" "v_object")
  )
)

(define-method set_param
  (of-object "GValue")
  (c-name "g_value_set_param")
  (return-type "none")
  (parameters
    '("GParamSpec*" "param")
  )
)

(define-method set_param_take_ownership
  (of-object "GValue")
  (c-name "g_value_set_param_take_ownership")
  (return-type "none")
  (parameters
    '("GParamSpec*" "param")
  )
)

(define-method set_pointer
  (of-object "GValue")
  (c-name "g_value_set_pointer")
  (return-type "none")
  (parameters
    '("gpointer" "v_pointer")
  )
)

(define-method set_schar
  (of-object "GValue")
  (c-name "g_value_set_schar")
  (return-type "none")
  (parameters
    '("gint8" "v_char")
  )
)

(define-method set_static_boxed
  (of-object "GValue")
  (c-name "g_value_set_static_boxed")
  (return-type "none")
  (parameters
    '("gconstpointer" "v_boxed")
  )
)

(define-method set_static_string
  (of-object "GValue")
  (c-name "g_value_set_static_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "v_string")
  )
)

(define-method set_string
  (of-object "GValue")
  (c-name "g_value_set_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "v_string")
  )
)

(define-method set_string_take_ownership
  (of-object "GValue")
  (c-name "g_value_set_string_take_ownership")
  (return-type "none")
  (parameters
    '("gchar*" "v_string")
  )
)

(define-method set_uchar
  (of-object "GValue")
  (c-name "g_value_set_uchar")
  (return-type "none")
  (parameters
    '("guchar" "v_uchar")
  )
)

(define-method set_uint
  (of-object "GValue")
  (c-name "g_value_set_uint")
  (return-type "none")
  (parameters
    '("guint" "v_uint")
  )
)

(define-method set_uint64
  (of-object "GValue")
  (c-name "g_value_set_uint64")
  (return-type "none")
  (parameters
    '("guint64" "v_uint64")
  )
)

(define-method set_ulong
  (of-object "GValue")
  (c-name "g_value_set_ulong")
  (return-type "none")
  (parameters
    '("gulong" "v_ulong")
  )
)

(define-method set_variant
  (of-object "GValue")
  (c-name "g_value_set_variant")
  (return-type "none")
  (parameters
    '("GVariant*" "variant")
  )
)

(define-method take_boxed
  (of-object "GValue")
  (c-name "g_value_take_boxed")
  (return-type "none")
  (parameters
    '("gconstpointer" "v_boxed")
  )
)

(define-method take_object
  (of-object "GValue")
  (c-name "g_value_take_object")
  (return-type "none")
  (parameters
    '("gpointer" "v_object")
  )
)

(define-method take_param
  (of-object "GValue")
  (c-name "g_value_take_param")
  (return-type "none")
  (parameters
    '("GParamSpec*" "param")
  )
)

(define-method take_string
  (of-object "GValue")
  (c-name "g_value_take_string")
  (return-type "none")
  (parameters
    '("gchar*" "v_string")
  )
)

(define-method take_variant
  (of-object "GValue")
  (c-name "g_value_take_variant")
  (return-type "none")
  (parameters
    '("GVariant*" "variant")
  )
)

(define-method transform
  (of-object "GValue")
  (c-name "g_value_transform")
  (return-type "gboolean")
  (parameters
    '("GValue*" "dest_value")
  )
)

(define-method unset
  (of-object "GValue")
  (c-name "g_value_unset")
  (return-type "none")
)

(define-function new
  (c-name "g_value_array_new")
  (return-type "GValueArray*")
  (parameters
    '("guint" "n_prealloced")
  )
)

(define-method append
  (of-object "GValueArray")
  (c-name "g_value_array_append")
  (return-type "GValueArray*")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method copy
  (of-object "GValueArray")
  (c-name "g_value_array_copy")
  (return-type "GValueArray*")
)

(define-method free
  (of-object "GValueArray")
  (c-name "g_value_array_free")
  (return-type "none")
)

(define-method get_nth
  (of-object "GValueArray")
  (c-name "g_value_array_get_nth")
  (return-type "GValue*")
  (parameters
    '("guint" "index_")
  )
)

(define-method insert
  (of-object "GValueArray")
  (c-name "g_value_array_insert")
  (return-type "GValueArray*")
  (parameters
    '("guint" "index_")
    '("const-GValue*" "value")
  )
)

(define-method prepend
  (of-object "GValueArray")
  (c-name "g_value_array_prepend")
  (return-type "GValueArray*")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method remove
  (of-object "GValueArray")
  (c-name "g_value_array_remove")
  (return-type "GValueArray*")
  (parameters
    '("guint" "index_")
  )
)

(define-method sort
  (of-object "GValueArray")
  (c-name "g_value_array_sort")
  (return-type "GValueArray*")
  (parameters
    '("GCompareFunc" "compare_func")
  )
)

(define-method sort_with_data
  (of-object "GValueArray")
  (c-name "g_value_array_sort_with_data")
  (return-type "GValueArray*")
  (parameters
    '("GCompareDataFunc" "compare_func")
    '("gpointer" "user_data")
  )
)

(define-method clear
  (of-object "GWeakRef")
  (c-name "g_weak_ref_clear")
  (return-type "none")
)

(define-method get
  (of-object "GWeakRef")
  (c-name "g_weak_ref_get")
  (return-type "gpointer")
)

(define-method init
  (of-object "GWeakRef")
  (c-name "g_weak_ref_init")
  (return-type "none")
  (parameters
    '("gpointer" "object")
  )
)

(define-method set
  (of-object "GWeakRef")
  (c-name "g_weak_ref_set")
  (return-type "none")
  (parameters
    '("gpointer" "object")
  )
)

