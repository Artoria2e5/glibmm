/* Copyright (C) 2007 The glibmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

_DEFS(glibmm,glib)

#include <glibmm/regex.h>
#include <glibmm/value.h>

#include <glib/gregex.h>

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GMatchInfo GMatchInfo;
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Glib
{

/** TODO
 *
 * @newin2p12
 */
class MatchInfo
{
  //TODO: Use a different _CLASS_*() macro. GMatchInfo is not (yet) a boxed type.
  //Or fix this one to allow NONE for the  copy function.
  _CLASS_BOXEDTYPE(MatchInfo, GMatchInfo, NONE, g_match_info_copy, g_match_info_free)
  _IGNORE(g_match_info_free)
public:
 
  _WRAP_METHOD(Glib::RefPtr<Regex> get_regex(), g_match_info_get_regex, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Regex> get_regex() const, g_match_info_get_regex, constversion)

  _WRAP_METHOD(Glib::ustring get_string() const, g_match_info_get_string)

  _WRAP_METHOD(bool next(), g_match_info_next, errthrow)
  _WRAP_METHOD(bool matches() const, g_match_info_matches)
  _WRAP_METHOD(int get_match_count() const, g_match_info_get_match_count)
  _WRAP_METHOD(bool is_partial_match() const, g_match_info_is_partial_match)
  _WRAP_METHOD(Glib::ustring expand_references(const Glib::ustring& string_to_expand) const, g_match_info_expand_references, errthrow)
  _WRAP_METHOD(Glib::ustring fetch(int match_num) const, g_match_info_fetch)
  _WRAP_METHOD(bool fetch_pos(int match_num, int& start_pos, int& end_pos) const, g_match_info_fetch_pos)
  _WRAP_METHOD(Glib::ustring fetch_named(const Glib::ustring& name) const, g_match_info_fetch_named)
  _WRAP_METHOD(bool fetch_named_pos(const  Glib::ustring& name, int& start_pos, int& end_pos) const, g_match_info_fetch_named_pos)

  #m4 _CONVERSION(`gchar**',`Glib::StringArrayHandle',`Glib::StringArrayHandle($3, Glib::OWNERSHIP_DEEP)')
  _WRAP_METHOD(Glib::StringArrayHandle fetch_all	() const, g_match_info_fetch_all)
};


} // namespace Glib

