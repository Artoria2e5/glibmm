/* Copyright 2010 The glibmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/variant.h>
#include <glibmm/utility.h>
#include <glib.h>

namespace Glib
{

void VariantBase::get_normal_form(VariantBase& result) const
{
  GVariant* const g_value =
    g_variant_get_normal_form(const_cast<GVariant*>(gobj()));

  //The C function never returns NULL, according to its docuemenation,
  //so we don't need a bool return value.
  result.init(g_value); // g_value is already referenced.
}

void VariantBase::byteswap(VariantBase& result) const
{
  GVariant* const g_value = g_variant_byteswap(const_cast<GVariant*>(gobj()));
  result.init(g_value); // g_value is already referenced.
}

//static
void VariantStringBase::create_object_path(VariantStringBase& output,
  const std::string& object_path)
{
  GVariant* result = 0;
  result = g_variant_new_object_path(object_path.c_str());
  output.init(result);
}

//static
void VariantStringBase::create_signature(VariantStringBase& output,
  const std::string& signature)
{
  GVariant* result = 0;
  result = g_variant_new_signature(signature.c_str());
  output.init(result);
}

void VariantContainerBase::get(VariantBase& child, gsize index) const
{
  GVariant* const gvariant = g_variant_get_child_value(gobject_, index);
  child.init(gvariant);
}

bool VariantContainerBase::get_maybe(Glib::VariantBase& maybe) const
{
  GVariant* const g_value =
    g_variant_get_maybe(const_cast<GVariant*>(gobj()));

  if(g_value)
  {
    maybe.init(g_value); // g_value is already referenced.
    return true;
  }
  else
    return false;
}

/****************** Specializations ***********************************/

void VariantBase::init(const GVariant* cobject, bool take_a_reference)
{
  if(gobject_)
    g_variant_unref(gobject_);

  gobject_ = const_cast<GVariant*>(cobject);
  if(take_a_reference)
    g_variant_ref(gobject_);
}

// static
const VariantType& Variant<VariantBase>::variant_type()
{
  static VariantType type(G_VARIANT_TYPE_VARIANT);
  return type;
}

Variant<VariantBase> Variant<VariantBase>::create(const VariantBase& data)
{
  Variant<VariantBase> result = Variant<VariantBase>(g_variant_new_variant(const_cast<GVariant*>(data.gobj())));

  // Remove the floating reference (since it is newly created).
  g_variant_ref_sink(result.gobj());

  return result;
}

// static
const VariantType& Variant<Glib::ustring>::variant_type()
{
  static VariantType type(G_VARIANT_TYPE_STRING);
  return type;
}

Variant<Glib::ustring>
Variant<Glib::ustring>::create(const Glib::ustring& data)
{
  Variant<Glib::ustring> result =
    Variant<Glib::ustring>(g_variant_new_string(data.c_str()));

  // Remove the floating reference (since it is newly created).
  g_variant_ref_sink(result.gobj());

  return result;
}

Glib::ustring Variant<Glib::ustring>::get() const
{
  return Glib::ustring(g_variant_get_string(gobject_, 0));
}

// static
const VariantType& Variant<std::string>::variant_type()
{
  static VariantType type(G_VARIANT_TYPE_BYTESTRING);
  return type;
}

Variant<std::string>
Variant<std::string>::create(const std::string& data)
{
  Variant<std::string> result =
    Variant<std::string>(g_variant_new_bytestring(data.c_str()));

  // Remove the floating reference (since it is newly created).
  g_variant_ref_sink(result.gobj());

  return result;
}

std::string Variant<std::string>::get() const
{
  return std::string(g_variant_get_bytestring(gobject_));
}

typedef std::vector<Glib::ustring> type_vec_ustring;

// static
const VariantType& Variant<type_vec_ustring>::variant_type()
{
  static VariantType type(G_VARIANT_TYPE_STRING_ARRAY);
  return type;
}

Variant<type_vec_ustring>
Variant<type_vec_ustring>::create(const type_vec_ustring& data)
{
  // Get the variant type of the elements.
  VariantType element_variant_type = Variant<Glib::ustring>::variant_type();

  // Get the variant type of the array.
  VariantType array_variant_type =
    VariantType::create_array(element_variant_type);

  // Create a GVariantBuilder to build the array.
  GVariantBuilder* builder = g_variant_builder_new(array_variant_type.gobj());

  // Add the elements of the vector into the builder.
  for(typename type_vec_ustring::const_iterator iter = data.begin();
   iter < data.end(); iter++)
  {
    g_variant_builder_add(builder,
      reinterpret_cast<gchar*>(element_variant_type.gobj()), iter->c_str());
  }

  // Create the variant using the builder.
  Variant<type_vec_ustring> result =
    Variant<type_vec_ustring>(g_variant_new(
      reinterpret_cast<gchar*>(array_variant_type.gobj()), builder));

  // Remove the floating reference (since it is newly created).
  g_variant_ref_sink(result.gobj());

  return result;
}

Glib::ustring Variant<type_vec_ustring>::get(gsize index) const
{
  gsize n_elements = 0;

  const gchar** array = g_variant_get_strv(const_cast<GVariant*>(gobj()),
    &n_elements);

  if(index > n_elements)
    throw std::runtime_error(
      "Variant< std::vector<Glib::ustring >::get(): Index out of bounds.");

  return array[index];
}

type_vec_ustring Variant<type_vec_ustring>::get() const
{
  gsize n_elements = 0;

  const gchar** array = g_variant_get_strv(const_cast<GVariant*>(gobj()),
    &n_elements);

  type_vec_ustring result(array, array + n_elements);
  return result;
}

VariantIter Variant<type_vec_ustring>::get_iter()
{
  // Get the variant type of the elements.
  VariantType element_variant_type = Variant<Glib::ustring>::variant_type();

  // Get the variant type of the array.
  VariantType array_variant_type =
    VariantType::create_array(element_variant_type);

  // Get the GVariantIter.
  GVariantIter* g_iter = 0;
  g_variant_get(const_cast<GVariant*>(gobj()),
    reinterpret_cast<gchar*>(array_variant_type.gobj()), &g_iter);

  return VariantIter(g_iter);
}

typedef std::vector<std::string> type_vec_string;

// static
const VariantType& Variant<type_vec_string>::variant_type()
{
  static VariantType type(G_VARIANT_TYPE_BYTESTRING_ARRAY);
  return type;
}

Variant<type_vec_string>
Variant<type_vec_string>::create(const type_vec_string& data)
{
  // Get the variant type of the elements.
  VariantType element_variant_type = Variant<std::string>::variant_type();

  // Get the variant type of the array.
  VariantType array_variant_type =
    VariantType::create_array(element_variant_type);

  // Create a GVariantBuilder to build the array.
  GVariantBuilder* builder = g_variant_builder_new(array_variant_type.gobj());

  // Add the elements of the vector into the builder.
  for(typename type_vec_string::const_iterator iter = data.begin();
   iter < data.end(); iter++)
  {
    g_variant_builder_add(builder,
      reinterpret_cast<gchar*>(element_variant_type.gobj()), iter->c_str());
  }

  // Create the variant using the builder.
  Variant<type_vec_string> result =
    Variant<type_vec_string>(g_variant_new(
      reinterpret_cast<gchar*>(array_variant_type.gobj()), builder));

  // Remove the floating reference (since it is newly created).
  g_variant_ref_sink(result.gobj());

  return result;
}

std::string Variant<type_vec_string>::get(gsize index) const
{
  gsize n_elements = 0;

  const gchar** array = g_variant_get_strv(const_cast<GVariant*>(gobj()),
    &n_elements);

  if(index > n_elements)
    throw std::runtime_error(
      "Variant< std::vector<std::string >::get(): Index out of bounds.");

  return array[index];
}

type_vec_string Variant<type_vec_string>::get() const
{
  gsize n_elements = 0;

  const gchar** array = g_variant_get_strv(const_cast<GVariant*>(gobj()),
    &n_elements);

  type_vec_string result(array, array + n_elements);
  return result;
}

VariantIter Variant<type_vec_string>::get_iter()
{
  // Get the variant type of the elements.
  VariantType element_variant_type = Variant<std::string>::variant_type();

  // Get the variant type of the array.
  VariantType array_variant_type =
    VariantType::create_array(element_variant_type);

  // Get the GVariantIter.
  GVariantIter* g_iter = 0;
  g_variant_get(const_cast<GVariant*>(gobj()),
    reinterpret_cast<gchar*>(array_variant_type.gobj()), &g_iter);

  return VariantIter(g_iter);
}

} // namespace Glib
