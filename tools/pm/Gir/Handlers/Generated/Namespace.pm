## This file was generated by taghandlerwriter.pl script.
##
## Copyright 2011 Krzesimir Nowak
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
##

package Gir::Handlers::Generated::Namespace;

use strict;
use warnings;

use parent qw(Gir::Handlers::Generated::Common::Base);

use Gir::Handlers::Generated::Common::Store;
use Gir::Handlers::Generated::Common::Tags;
use Gir::Handlers::Generated::Alias;
use Gir::Handlers::Generated::Bitfield;
use Gir::Handlers::Generated::Callback;
use Gir::Handlers::Generated::Class;
use Gir::Handlers::Generated::Constant;
use Gir::Handlers::Generated::Enumeration;
use Gir::Handlers::Generated::Function;
use Gir::Handlers::Generated::Interface;
use Gir::Handlers::Generated::Record;
use Gir::Handlers::Generated::Union;

##
## private virtuals
##
sub _alias_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('alias'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_alias_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _bitfield_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('bitfield'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_bitfield_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _callback_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('callback'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_callback_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _class_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('class'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_class_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _constant_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('constant'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_constant_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _enumeration_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('enumeration'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_enumeration_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _function_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('function'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_function_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _interface_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('interface'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_interface_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _record_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('record'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_record_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _union_start_impl ($$$)
{
  my $self = shift;

  unless ($self->_is_start_ignored ('union'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_union_start_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _alias_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('alias'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_alias_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _bitfield_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('bitfield'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_bitfield_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _callback_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('callback'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_callback_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _class_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('class'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_class_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _constant_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('constant'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_constant_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _enumeration_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('enumeration'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_enumeration_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _function_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('function'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_function_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _interface_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('interface'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_interface_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _record_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('record'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_record_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _union_end_impl ($$)
{
  my $self = shift;

  unless ($self->_is_end_ignored ('union'))
  {
    #TODO: throw something.
    print STDERR 'Gir::Handlers::Generated::Namespace::_union_end_impl not implemented.' . "\n";
    exit (1);
  }
}

sub _setup_handlers ($)
{
  my $self = shift;

  $self->_set_handlers
  (
    Gir::Handlers::Generated::Common::Store->new
    ({
      'alias' => \&_alias_start,
      'bitfield' => \&_bitfield_start,
      'callback' => \&_callback_start,
      'class' => \&_class_start,
      'constant' => \&_constant_start,
      'enumeration' => \&_enumeration_start,
      'function' => \&_function_start,
      'interface' => \&_interface_start,
      'record' => \&_record_start,
      'union' => \&_union_start
    }),
    Gir::Handlers::Generated::Common::Store->new
    ({
      'alias' => \&_alias_end,
      'bitfield' => \&_bitfield_end,
      'callback' => \&_callback_end,
      'class' => \&_class_end,
      'constant' => \&_constant_end,
      'enumeration' => \&_enumeration_end,
      'function' => \&_function_end,
      'interface' => \&_interface_end,
      'record' => \&_record_end,
      'union' => \&_union_end
    })
  );
}

sub _setup_subhandlers ($)
{
  my $self = shift;

  $self->_set_subhandlers
  (
    $self->_generate_subhandlers
    ([
      'alias',
      'bitfield',
      'callback',
      'class',
      'constant',
      'enumeration',
      'function',
      'interface',
      'record',
      'union'
    ])
  );
}

##
## private (sort of)
##
sub _alias_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_alias_params (@atts_vals);

  $self->_alias_start_impl ($parser, $params);
}

sub _bitfield_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_bitfield_params (@atts_vals);

  $self->_bitfield_start_impl ($parser, $params);
}

sub _callback_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_callback_params (@atts_vals);

  $self->_callback_start_impl ($parser, $params);
}

sub _class_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_class_params (@atts_vals);

  $self->_class_start_impl ($parser, $params);
}

sub _constant_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_constant_params (@atts_vals);

  $self->_constant_start_impl ($parser, $params);
}

sub _enumeration_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_enumeration_params (@atts_vals);

  $self->_enumeration_start_impl ($parser, $params);
}

sub _function_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_function_params (@atts_vals);

  $self->_function_start_impl ($parser, $params);
}

sub _interface_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_interface_params (@atts_vals);

  $self->_interface_start_impl ($parser, $params);
}

sub _record_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_record_params (@atts_vals);

  $self->_record_start_impl ($parser, $params);
}

sub _union_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Generated::Common::Tags::get_union_params (@atts_vals);

  $self->_union_start_impl ($parser, $params);
}

sub _alias_end ($$)
{
  my ($self, $parser) = @_;

  $self->_alias_end_impl ($parser);
}

sub _bitfield_end ($$)
{
  my ($self, $parser) = @_;

  $self->_bitfield_end_impl ($parser);
}

sub _callback_end ($$)
{
  my ($self, $parser) = @_;

  $self->_callback_end_impl ($parser);
}

sub _class_end ($$)
{
  my ($self, $parser) = @_;

  $self->_class_end_impl ($parser);
}

sub _constant_end ($$)
{
  my ($self, $parser) = @_;

  $self->_constant_end_impl ($parser);
}

sub _enumeration_end ($$)
{
  my ($self, $parser) = @_;

  $self->_enumeration_end_impl ($parser);
}

sub _function_end ($$)
{
  my ($self, $parser) = @_;

  $self->_function_end_impl ($parser);
}

sub _interface_end ($$)
{
  my ($self, $parser) = @_;

  $self->_interface_end_impl ($parser);
}

sub _record_end ($$)
{
  my ($self, $parser) = @_;

  $self->_record_end_impl ($parser);
}

sub _union_end ($$)
{
  my ($self, $parser) = @_;

  $self->_union_end_impl ($parser);
}

##
## public
##
sub new ($)
{
  my $type = shift;
  my $class = (ref ($type) or $type or 'Gir::Handlers::Generated::Namespace');
  my $self = $class->SUPER::new ();

  return bless ($self, $class);
}

1; # indicate proper module load.
