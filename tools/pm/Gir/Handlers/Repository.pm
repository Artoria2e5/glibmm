## This file was generated by taghandlerwriter.pl script.
##
## Copyright 2011 Krzesimir Nowak
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
##

package Gir::Handlers::Repository;

use strict;
use warnings;

use parent qw(Gir::Handlers::Common::Base);

use Gir::Api::CInclude;
use Gir::Api::Include;
use Gir::Api::Namespace;
use Gir::Api::Package;

use Gir::Handlers::Common::Misc;
use Gir::Handlers::Common::Store;
use Gir::Handlers::Common::Tags;

use Gir::Handlers::CInclude;
use Gir::Handlers::Include;
use Gir::Handlers::Namespace;
use Gir::Handlers::Package;

##
## private:
##
sub _c_include_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Common::Tags::get_c_include_params (@atts_vals);
  my $state = $parser->get_current_state;
  my $object = Gir::Api::CInclude->new_with_params ($params);

  $state->push_object ($object);
  $self->_call_start_hooks ('c:include');
}

sub _include_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Common::Tags::get_include_params (@atts_vals);
  my $state = $parser->get_current_state;
  my $object = Gir::Api::Include->new_with_params ($params);

  $state->push_object ($object);
  $self->_call_start_hooks ('include');
}

sub _namespace_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Common::Tags::get_namespace_params (@atts_vals);
  my $state = $parser->get_current_state;
  my $object = Gir::Api::Namespace->new_with_params ($params);

  $state->push_object ($object);
  $self->_call_start_hooks ('namespace');
}

sub _package_start ($$@)
{
  my ($self, $parser, @atts_vals) = @_;
  my $params = Gir::Handlers::Common::Tags::get_package_params (@atts_vals);
  my $state = $parser->get_current_state;
  my $object = Gir::Api::Package->new_with_params ($params);

  $state->push_object ($object);
  $self->_call_start_hooks ('package');
}

sub _c_include_end ($$)
{
  my ($self, $parser) = @_;

  $self->_call_end_hooks ('c:include');

  my $state = $parser->get_current_state;
  my $object = $state->get_current_object;

  $state->pop_object;

  my $parent_object = $state->get_current_object;
  my $count = $parent_object->get_g_c_include_count;
  my $name = Gir::Handlers::Common::Misc::get_object_name ($object, $count);

  $parent_object->add_g_c_include ($name, $object);
}

sub _include_end ($$)
{
  my ($self, $parser) = @_;

  $self->_call_end_hooks ('include');

  my $state = $parser->get_current_state;
  my $object = $state->get_current_object;

  $state->pop_object;

  my $parent_object = $state->get_current_object;
  my $count = $parent_object->get_g_include_count;
  my $name = Gir::Handlers::Common::Misc::get_object_name ($object, $count);

  $parent_object->add_g_include ($name, $object);
}

sub _namespace_end ($$)
{
  my ($self, $parser) = @_;

  $self->_call_end_hooks ('namespace');

  my $state = $parser->get_current_state;
  my $object = $state->get_current_object;

  $state->pop_object;

  my $parent_object = $state->get_current_object;
  my $count = $parent_object->get_g_namespace_count;
  my $name = Gir::Handlers::Common::Misc::get_object_name ($object, $count);

  $parent_object->add_g_namespace ($name, $object);
}

sub _package_end ($$)
{
  my ($self, $parser) = @_;

  $self->_call_end_hooks ('package');

  my $state = $parser->get_current_state;
  my $object = $state->get_current_object;

  $state->pop_object;

  my $parent_object = $state->get_current_object;
  my $count = $parent_object->get_g_package_count;
  my $name = Gir::Handlers::Common::Misc::get_object_name ($object, $count);

  $parent_object->add_g_package ($name, $object);
}

##
## public:
##
sub new ($)
{
  my $type = shift;
  my $class = (ref ($type) or $type or 'Gir::Handlers::Repository');
  my $start_store = Gir::Handlers::Common::Store->new
  ({
    'c:include' => \&_c_include_start,
    'include' => \&_include_start,
    'namespace' => \&_namespace_start,
    'package' => \&_package_start
  });
  my $end_store = Gir::Handlers::Common::Store->new
  ({
    'c:include' => \&_c_include_end,
    'include' => \&_include_end,
    'namespace' => \&_namespace_end,
    'package' => \&_package_end
  });
  my $subhandlers =
  {
    'c:include' => 'Gir::Handlers::CInclude',
    'include' => 'Gir::Handlers::Include',
    'namespace' => 'Gir::Handlers::Namespace',
    'package' => 'Gir::Handlers::Package'
  };
  my $self = $class->SUPER::new ($start_store, $end_store, $subhandlers);

  return bless ($self, $class);
}

1; # indicate proper module load.
