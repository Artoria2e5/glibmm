## This file was generated by taghandlerwriter.pl script.
##
## Copyright 2011 Krzesimir Nowak
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
##

package Gir::Api::Function;

use strict;
use warnings;

use parent qw(Gir::Api::Common::Base);

use Gir::Api::Attribute;
use Gir::Api::Doc;
use Gir::Api::Parameters;
use Gir::Api::ReturnValue;

sub new ($)
{
  my $type = shift;
  my $class = (ref ($type) or $type or 'Gir::Api::Function');
  my $groups =
  [
    'group_attribute',
    'group_doc',
    'group_parameters',
    'group_return_value'
  ];
  my $attributes =
  [
    'attribute_c_identifier',
    'attribute_deprecated',
    'attribute_deprecated_version',
    'attribute_introspectable',
    'attribute_moved_to',
    'attribute_name',
    'attribute_shadowed_by',
    'attribute_shadows',
    'attribute_throws',
    'attribute_version'
  ];
  my $self = $class->SUPER::new ($groups, $attributes);

  bless ($self, $class);
  return $self;
}

sub new_with_params ($$)
{
  my ($type, $params) = @_;
  my $self = Gir::Api::Function::new ($type);

  $self->set_a_c_identifier($params->{'c:identifier'});
  $self->set_a_deprecated($params->{'deprecated'});
  $self->set_a_deprecated_version($params->{'deprecated-version'});
  $self->set_a_introspectable($params->{'introspectable'});
  $self->set_a_moved_to($params->{'moved-to'});
  $self->set_a_name($params->{'name'});
  $self->set_a_shadowed_by($params->{'shadowed-by'});
  $self->set_a_shadows($params->{'shadows'});
  $self->set_a_throws($params->{'throws'});
  $self->set_a_version($params->{'version'});

  return $self;
}

sub get_g_attribute_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_attribute', $name);
}

sub get_g_doc_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_doc', $name);
}

sub get_g_parameters_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_parameters', $name);
}

sub get_g_return_value_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_return_value', $name);
}


sub get_g_attribute_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_attribute', $index);
}

sub get_g_doc_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_doc', $index);
}

sub get_g_parameters_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_parameters', $index);
}

sub get_g_return_value_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_return_value', $index);
}


sub get_g_attribute_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_attribute');
}

sub get_g_doc_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_doc');
}

sub get_g_parameters_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_parameters');
}

sub get_g_return_value_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_return_value');
}


sub add_g_attribute ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_attribute', $member_name, $member);
}

sub add_g_doc ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_doc', $member_name, $member);
}

sub add_g_parameters ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_parameters', $member_name, $member);
}

sub add_g_return_value ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_return_value', $member_name, $member);
}


sub get_a_c_identifier ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_c_identifier');
}

sub get_a_deprecated ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_deprecated');
}

sub get_a_deprecated_version ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_deprecated_version');
}

sub get_a_introspectable ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_introspectable');
}

sub get_a_moved_to ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_moved_to');
}

sub get_a_name ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_name');
}

sub get_a_shadowed_by ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_shadowed_by');
}

sub get_a_shadows ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_shadows');
}

sub get_a_throws ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_throws');
}

sub get_a_version ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_version');
}


sub set_a_c_identifier ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_c_identifier', $value);
}

sub set_a_deprecated ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_deprecated', $value);
}

sub set_a_deprecated_version ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_deprecated_version', $value);
}

sub set_a_introspectable ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_introspectable', $value);
}

sub set_a_moved_to ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_moved_to', $value);
}

sub set_a_name ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_name', $value);
}

sub set_a_shadowed_by ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_shadowed_by', $value);
}

sub set_a_shadows ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_shadows', $value);
}

sub set_a_throws ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_throws', $value);
}

sub set_a_version ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_version', $value);
}


1; # indicate proper module load.
