## This file was generated by taghandlerwriter.pl script.
##
## Copyright 2011 Krzesimir Nowak
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
##

package Gir::Api::Namespace;

use strict;
use warnings;

use parent qw(Gir::Api::Common::Base);

use Gir::Api::Alias;
use Gir::Api::Bitfield;
use Gir::Api::Callback;
use Gir::Api::Class;
use Gir::Api::Constant;
use Gir::Api::Enumeration;
use Gir::Api::Function;
use Gir::Api::GlibBoxed;
use Gir::Api::Interface;
use Gir::Api::Record;
use Gir::Api::Union;

sub new ($)
{
  my $type = shift;
  my $class = (ref ($type) or $type or 'Gir::Api::Namespace');
  my $groups =
  [
    'group_alias',
    'group_bitfield',
    'group_callback',
    'group_class',
    'group_constant',
    'group_enumeration',
    'group_function',
    'group_glib_boxed',
    'group_interface',
    'group_record',
    'group_union'
  ];
  my $attributes =
  [
    'attribute_c_identifier_prefixes',
    'attribute_c_symbol_prefixes',
    'attribute_name',
    'attribute_shared_library',
    'attribute_version'
  ];
  my $self = $class->SUPER::new ($groups, $attributes);

  bless ($self, $class);
  return $self;
}

sub new_with_params ($$)
{
  my ($type, $params) = @_;
  my $self = Gir::Api::Namespace::new ($type);

  $self->set_a_c_identifier_prefixes($params->{'c:identifier-prefixes'});
  $self->set_a_c_symbol_prefixes($params->{'c:symbol-prefixes'});
  $self->set_a_name($params->{'name'});
  $self->set_a_shared_library($params->{'shared-library'});
  $self->set_a_version($params->{'version'});

  return $self;
}

sub get_g_alias_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_alias', $name);
}

sub get_g_bitfield_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_bitfield', $name);
}

sub get_g_callback_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_callback', $name);
}

sub get_g_class_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_class', $name);
}

sub get_g_constant_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_constant', $name);
}

sub get_g_enumeration_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_enumeration', $name);
}

sub get_g_function_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_function', $name);
}

sub get_g_glib_boxed_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_glib_boxed', $name);
}

sub get_g_interface_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_interface', $name);
}

sub get_g_record_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_record', $name);
}

sub get_g_union_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_union', $name);
}


sub get_g_alias_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_alias', $index);
}

sub get_g_bitfield_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_bitfield', $index);
}

sub get_g_callback_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_callback', $index);
}

sub get_g_class_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_class', $index);
}

sub get_g_constant_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_constant', $index);
}

sub get_g_enumeration_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_enumeration', $index);
}

sub get_g_function_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_function', $index);
}

sub get_g_glib_boxed_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_glib_boxed', $index);
}

sub get_g_interface_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_interface', $index);
}

sub get_g_record_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_record', $index);
}

sub get_g_union_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_union', $index);
}


sub get_g_alias_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_alias');
}

sub get_g_bitfield_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_bitfield');
}

sub get_g_callback_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_callback');
}

sub get_g_class_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_class');
}

sub get_g_constant_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_constant');
}

sub get_g_enumeration_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_enumeration');
}

sub get_g_function_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_function');
}

sub get_g_glib_boxed_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_glib_boxed');
}

sub get_g_interface_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_interface');
}

sub get_g_record_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_record');
}

sub get_g_union_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_union');
}


sub add_g_alias ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_alias', $member_name, $member);
}

sub add_g_bitfield ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_bitfield', $member_name, $member);
}

sub add_g_callback ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_callback', $member_name, $member);
}

sub add_g_class ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_class', $member_name, $member);
}

sub add_g_constant ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_constant', $member_name, $member);
}

sub add_g_enumeration ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_enumeration', $member_name, $member);
}

sub add_g_function ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_function', $member_name, $member);
}

sub add_g_glib_boxed ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_glib_boxed', $member_name, $member);
}

sub add_g_interface ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_interface', $member_name, $member);
}

sub add_g_record ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_record', $member_name, $member);
}

sub add_g_union ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_union', $member_name, $member);
}


sub get_a_c_identifier_prefixes ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_c_identifier_prefixes');
}

sub get_a_c_symbol_prefixes ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_c_symbol_prefixes');
}

sub get_a_name ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_name');
}

sub get_a_shared_library ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_shared_library');
}

sub get_a_version ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_version');
}


sub set_a_c_identifier_prefixes ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_c_identifier_prefixes', $value);
}

sub set_a_c_symbol_prefixes ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_c_symbol_prefixes', $value);
}

sub set_a_name ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_name', $value);
}

sub set_a_shared_library ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_shared_library', $value);
}

sub set_a_version ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_version', $value);
}


1; # indicate proper module load.
