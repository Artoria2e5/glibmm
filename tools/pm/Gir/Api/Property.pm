## This file was generated by taghandlerwriter.pl script.
##
## Copyright 2011 Krzesimir Nowak
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
##

package Gir::Api::Property;

use strict;
use warnings;

use parent qw(Gir::Api::Common::Base);

use Gir::Api::Array;
use Gir::Api::Attribute;
use Gir::Api::Doc;
use Gir::Api::Type;
use Gir::Api::Varargs;

sub new ($)
{
  my $type = shift;
  my $class = (ref ($type) or $type or 'Gir::Api::Property');
  my $groups =
  [
    'group_array',
    'group_attribute',
    'group_doc',
    'group_type',
    'group_varargs'
  ];
  my $attributes =
  [
    'attribute_construct',
    'attribute_construct_only',
    'attribute_deprecated',
    'attribute_deprecated_version',
    'attribute_introspectable',
    'attribute_name',
    'attribute_readable',
    'attribute_transfer_ownership',
    'attribute_version',
    'attribute_writable'
  ];
  my $self = $class->SUPER::new ($groups, $attributes);

  bless ($self, $class);
  return $self;
}

sub new_with_params ($$)
{
  my ($type, $params) = @_;
  my $self = Gir::Api::Property::new ($type);

  $self->set_a_construct($params->{'construct'});
  $self->set_a_construct_only($params->{'construct-only'});
  $self->set_a_deprecated($params->{'deprecated'});
  $self->set_a_deprecated_version($params->{'deprecated-version'});
  $self->set_a_introspectable($params->{'introspectable'});
  $self->set_a_name($params->{'name'});
  $self->set_a_readable($params->{'readable'});
  $self->set_a_transfer_ownership($params->{'transfer-ownership'});
  $self->set_a_version($params->{'version'});
  $self->set_a_writable($params->{'writable'});

  return $self;
}

sub get_g_array_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_array', $name);
}

sub get_g_attribute_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_attribute', $name);
}

sub get_g_doc_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_doc', $name);
}

sub get_g_type_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_type', $name);
}

sub get_g_varargs_by_name ($$)
{
  my ($self, $name) = @_;

  return $self->_get_group_member_by_name ('group_varargs', $name);
}


sub get_g_array_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_array', $index);
}

sub get_g_attribute_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_attribute', $index);
}

sub get_g_doc_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_doc', $index);
}

sub get_g_type_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_type', $index);
}

sub get_g_varargs_by_index ($$)
{
  my ($self, $index) = @_;

  return $self->_get_group_member_by_index ('group_varargs', $index);
}


sub get_g_array_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_array');
}

sub get_g_attribute_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_attribute');
}

sub get_g_doc_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_doc');
}

sub get_g_type_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_type');
}

sub get_g_varargs_count ($)
{
  my $self = shift;

  return $self->_get_group_member_count ('group_varargs');
}


sub add_g_array ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_array', $member_name, $member);
}

sub add_g_attribute ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_attribute', $member_name, $member);
}

sub add_g_doc ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_doc', $member_name, $member);
}

sub add_g_type ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_type', $member_name, $member);
}

sub add_g_varargs ($$$)
{
  my ($self, $member_name, $member) = @_;

  $self->_add_member_to_group ('group_varargs', $member_name, $member);
}


sub get_a_construct ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_construct');
}

sub get_a_construct_only ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_construct_only');
}

sub get_a_deprecated ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_deprecated');
}

sub get_a_deprecated_version ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_deprecated_version');
}

sub get_a_introspectable ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_introspectable');
}

sub get_a_name ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_name');
}

sub get_a_readable ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_readable');
}

sub get_a_transfer_ownership ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_transfer_ownership');
}

sub get_a_version ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_version');
}

sub get_a_writable ($)
{
  my ($self) = @_;

  return $self->_get_attribute ('attribute_writable');
}


sub set_a_construct ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_construct', $value);
}

sub set_a_construct_only ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_construct_only', $value);
}

sub set_a_deprecated ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_deprecated', $value);
}

sub set_a_deprecated_version ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_deprecated_version', $value);
}

sub set_a_introspectable ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_introspectable', $value);
}

sub set_a_name ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_name', $value);
}

sub set_a_readable ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_readable', $value);
}

sub set_a_transfer_ownership ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_transfer_ownership', $value);
}

sub set_a_version ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_version', $value);
}

sub set_a_writable ($$)
{
  my ($self, $value) = @_;

  $self->_set_attribute ('attribute_writable', $value);
}


1; # indicate proper module load.
