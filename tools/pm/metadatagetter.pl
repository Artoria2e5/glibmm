#!/usr/bin/env perl

use strict;
use warnings;

use File::Spec;

use XML::Parser::Expat;

# TODO: options: --output-file=<file>, --ignore-file=<file>
# --output-file=<file> - result will be written to this file.
# --ignore-file=<file> - path to file containing a list of gir files to ignore.

unless (@ARGV)
{
  print STDERR "No files given.\n";
}

# $tag =>
# {
#   $attribute =>
#   {
#     '!@#$_COUNT_$#@!' => $count,
#     '!@#$_VALUE_$#@!' => $value
#   },
#   '!@#$_COUNT_$#@!' => $count
# }
my $tags = {};
# $tag =>
# {
#   $kid1 =>
#   {
#     $grandkid1 => ...
#     $grandkid2 => ...
#     ...
#   }
#   $kid2 =>
#   {
#     $grandkid1 => ...
#     $grandkid2 => ...
#     ...
#   }
#   ...
# }
my $glob_tree = {};
my $magic_count = '!@#$_COUNT_$#@!';
my $magic_value = '!@#$_VALUE_$#@!';

sub handle_tree ($$)
{
  my ($expat, $tag) = @_;
  my @context = $expat->context;
  my $root = $glob_tree;

#  print STDERR "\n====\n";
  foreach my $elem (@context)
  {
    unless (exists ($root->{$elem}))
    {
      $root->{$elem} = {};
    }

    my $href = $root->{$elem};

#    print STDERR $elem . " (" . $href . ")\n";
    $root = $href;
  }
  unless (exists ($root->{$tag}))
  {
    $root->{$tag} = {};
  }

#  print STDERR "TREE\n";

#  foreach my $key (sort keys %{$glob_tree})
#  {
#    print STDERR $key . "\n";
#  }
}

sub print_tree ($$);

sub print_tree ($$)
{
  my ($subtree, $level) = @_;

  foreach my $key (sort keys %{$subtree})
  {
    print STDOUT '  ' x $level . $key . "\n";
    print_tree ($subtree->{$key}, $level + 1);
  }
}

sub handle_attributes ($$@)
{
  my ($expat, $tag, @atts_vals) = @_;

  unless (exists ($tags->{$tag}))
  {
    $tags->{$tag} = {$magic_count => 0};
  }

  my $elem = $tags->{$tag};
  my $att = undef;

  ++$elem->{$magic_count};
  foreach my $entry (@atts_vals)
  {
    unless (defined ($att))
    {
      $att = $entry;
    }
    else
    {
      if (exists ($elem->{$att}))
      {
        my $attribute = $elem->{$att};

        ++$attribute->{$magic_count};

        if ($attribute->{$magic_value} ne $entry)
        {
          $attribute->{$magic_value} = '!@#$$#@!';
        }
      }
      else
      {
        $elem->{$att} = {$magic_count => 1, $magic_value => $entry};
      }
      $att = undef;
    }
  }
}

my %omit_files =
(
  'GTop-2.0.gir' => undef
);

my @used_files = ();
my @omitted_files = ();

for my $file (@ARGV)
{
  my (undef, undef, $basename) = File::Spec->splitpath ($file);

  if (exists $omit_files{$basename})
  {
    print STDERR 'Omitting ' . $basename . ".\n";
    push (@omitted_files, $basename);
  }
  else
  {
    print STDERR 'Parsing ' . $basename . ".\n";
    push (@used_files, $basename);

    my $parser = XML::Parser::Expat->new ();

    $parser->setHandlers
    (
      'Start' => sub {handle_attributes ($_[0], $_[1], @_[2 .. @_ - 1]); handle_tree ($_[0], $_[1])}
    );
    $parser->parsefile ($file);
    $parser->release ();
  }
}

{
  my $msg = "Metadata were generated by parsing the following files:\n";

  foreach my $file (@used_files)
  {
    $msg .= $file . "\n";
  }

  if (@omitted_files > 0)
  {
    $msg .= "\nFollowing files were omitted:\n";

    foreach my $file (sort @omitted_files)
    {
      $msg .= $file . "\n";
    }
  }
  print STDOUT $msg;
}

print STDOUT "\n==========\n\n";

foreach my $tag (sort keys (%{$tags}))
{
  my $elem = delete $tags->{$tag};
  my $elem_count = delete $elem->{$magic_count};
  my %mandatory_atts = ();
  my %optional_atts = ();
  my $any_mandatory = 0;
  my $any_optional = 0;

  foreach my $att (keys (%{$elem}))
  {
    my $attribute = delete $elem->{$att};
    my $att_count = delete $attribute->{$magic_count};
    my $att_value = delete $attribute->{$magic_value};

    if ($att_count == $elem_count)
    {
      $mandatory_atts{$att} = $att_value;
      $any_mandatory = 1;
    }
    else
    {
      $optional_atts{$att} = $att_value;
      $any_optional = 1;
    }
  }

  delete $tags->{$tag};

  my $msg = "Tag:\n  Name: " . $tag . "\n";
  if ($any_mandatory)
  {
    $msg .= "  Mandatory attributes:\n";
    foreach my $att (sort keys %mandatory_atts)
    {
      $msg .= '    ' . $att . ' => ' . $mandatory_atts{$att} . "\n";
    }
  }
  if ($any_optional)
  {
    $msg .= "  Optional attributes:\n";
    foreach my $att (sort keys %optional_atts)
    {
      $msg .= '    ' . $att . ' => ' . $optional_atts{$att} . "\n";
    }
  }
  print STDOUT $msg;
}

print STDOUT "\n==========\n\n";
print_tree ($glob_tree, 0);
